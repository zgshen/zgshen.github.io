<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zguishen&#39;s blog</title>
  
  
  <link href="https://zguishen.com/atom.xml" rel="self"/>
  
  <link href="https://zguishen.com/"/>
  <updated>2022-05-18T15:18:43.315Z</updated>
  <id>https://zguishen.com/</id>
  
  <author>
    <name>zguishen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记应用选择和知识管理</title>
    <link href="https://zguishen.com/posts/4fd1272.html"/>
    <id>https://zguishen.com/posts/4fd1272.html</id>
    <published>2022-04-30T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/202205/Screenshot-from-2022-05-03-11-16-29.png" alt="img"></p><p>开发人员在职业生涯会学习许多技术和技能，随着知识积累越多，复杂度越大，就容易觉得知识体系很混乱。所以就需要我们做笔记，构建自己的知识体系，而且由于各种编程语言和技术之间本身也有共通的地方，做好归纳和关联更有利于我们快速。学习新的技术。</p><p>现在网络上有许许多多的笔记应用和管理工具，相关的讨论也非常多，在v2ex搜索笔记应用的帖子多达<a href="https://www.google.com/search?q=site:v2ex.com/t%20%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8">六千条记录</a>,网友们分享了许多的笔记应用和他们各自的知识管理方法，但总结起来大家在意的无非就是功能、隐私和安全三个方面，下面展开说说。</p><h3 id="各类笔记应用的比较"><a href="#各类笔记应用的比较" class="headerlink" title="各类笔记应用的比较"></a>各类笔记应用的比较</h3><p>做笔记，可以简单地用一个txt文件写，也可以厂商提供的web服务或者应用写，还可以用开源的可私有化部署的笔记应用写。</p><h4 id="树形-or-网状"><a href="#树形-or-网状" class="headerlink" title="树形 or 网状"></a>树形 or 网状</h4><p>各类笔记应用提供的功能也有所不同，一般对于开发人员，更喜欢 Markdown 这样的轻量级标记语言，语法简单，贴代码方便，所以大多笔记应用都支持 Markdown。传统的笔记都是用树形结构（或者说层级）管理，近几年大纲（卡片式）双链（或者说<a href="https://zh.wikipedia.org/zh-cn/%E5%8F%8D%E5%90%91%E9%93%BE%E6%8E%A5">反向链接</a>）笔记开始火了起来，比如 Workflowy、Roam Reseach 和新出的 Logseq 等等。大纲可以转换成脑图，而双链则允许我们在笔记中互相引用其他笔记，整个笔记库形成一个网状的结构，知识之间是互相关联的。双链要求我们要求更强的整合和组织能力，我自己用不惯，个人还是更喜欢树形这样简单的结构。</p><h4 id="在线-SaaS-or-本地私有化部署"><a href="#在线-SaaS-or-本地私有化部署" class="headerlink" title="在线 SaaS or 本地私有化部署"></a>在线 SaaS or 本地私有化部署</h4><p>一款笔记应用，我们除了关注本身的功能外，注意的点还有隐私和安全。</p><p>纯在线或托管在官方服务意味着隐私和安全都难以保证，在线应用需要你注册账号，在国内的应用还必须提供手机号，平台一般都会有一些审查，并且在线服务一旦出现故障或者自己本地没有网络都用不了。优点则是不需要自己操心，上手就用，比如  Notion 这样 all-in-one 的笔记应用，不仅有笔记的功能，还可以管理日程，还有团队协作。</p><p>对比在线应用我更喜欢数据存储在本地的应用，比如 Joplin 和 Obsidian 等，数据同步则由自己解决，比如 Joplin 可以私有化部署， Obsidian 可以用插件同步到云。 </p><p>这里列举一下常见的一些笔记应用：</p><ul><li>传统的笔记应用：Notion、印象、有道、OneNote（不支持Markdown）和为知笔记等。</li><li>大纲双链笔记：Roam Reseach、Logseq 和 Obsidian 等。</li><li>可私有化部署的：Joplin、为知lite 和 Outlilne 等。</li></ul><p>对于有黑历史和名号太臭的比如思源和wolai就别用了。</p><h3 id="我的知识管理方法"><a href="#我的知识管理方法" class="headerlink" title="我的知识管理方法"></a>我的知识管理方法</h3><p>日常网站的收藏剪切，放在 <a href="https://notion.zguishen.com/">Notion</a>，或者直接备份到 <a href="https://web.archive.org/">Internet Archive</a></p><p>私人的笔记记录到 Obsidian 这类能自己掌控数据的笔记应用中，同步插件我是用 <a href="https://github.com/remotely-save/remotely-save">Remotely Save</a> 配合腾讯COS对象存储使用。</p><p>整理成体系的知识，想要分享到互联网，可用 wiki 类应用，比如 TiddlyWiki 或者 MkDocs 这类 wiki 应用上面。我使用的是 MkDocs 做 <a href="https://wiki.zguishen.com/">wiki</a>。</p><p>自己想法和见闻形成文章的写到博客，可使用 Hexo 或 Hugo 配置 GitHub Action 自动化部署到 GitHub Pages，比如这篇文章就发布到我的<a href="https://zguishen.com/">博客</a>。</p><p>总结下来，我的知识管理从外界输入到内部整理的路径就是 Notion -&gt; Obsidian -&gt; MkDocs -&gt; Hexo，由粗糙的剪切复制到整理，再到形成自己的知识输出这样一个流程。虽然大家喜欢的工具可能不同，但跟知识管理的思路没关系，这也许可以给你一点参考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/202205/Screenshot-from-2022-05-03-11-16-29.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;开发人员在职业生涯会学习许多技术和技能，随着知识积累越多，复杂度越大，就容易觉得知识体系很混乱。所以</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="笔记" scheme="https://zguishen.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>疫情封城需要储备什么物资</title>
    <link href="https://zguishen.com/posts/5f43d404.html"/>
    <id>https://zguishen.com/posts/5f43d404.html</id>
    <published>2022-04-11T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>最近上过网的都看到了上海的疫情负面新闻有多离谱，一个城市某些部件一旦停止运转，造成的结果将是灾难性的，而且这种这么荒唐的事情是发生在上海这样一个超一线城市，属实让人惊呆了。</p><p>那么作为一个普通人该如果应对这种情况呢，中国大陆一直奉行着动态清零的政策，短期内政策是不会变化的，在自己的城市出现上海这种情况也不是不可能。我们这里不讨论政策的好坏，只说在国内如果碰到了疫情封城，该准备什么物资来维持日常生活。作为一个毕业之后六年来一直独居，从近疫情爆发两三年来大部分时间一直宅在住所的人，我现在已经有了自己的一套生活方式。</p><h2 id="食物和药物"><a href="#食物和药物" class="headerlink" title="食物和药物"></a>食物和药物</h2><h3 id="主粮"><a href="#主粮" class="headerlink" title="主粮"></a>主粮</h3><p>大米、面、八宝粥和速冻饺子等等。</p><p>米5kg的一袋一般够吃半个多月，有时轮流吃下面或其他东西，5kg能吃一个不用太担心。可以买一些粗粮，比如八宝粥之类的来煮粥，买一些速冻饺子来和面一起煮，如果冰箱够大，能多买就多买些。</p><h3 id="菜"><a href="#菜" class="headerlink" title="菜"></a>菜</h3><p>白菜、包菜、脱水蔬菜。</p><p>菜可能是最麻烦的，大多数青菜都很难存储长久，所以最好是买白菜和包菜这种易储存的蔬菜，能放一个月。</p><p>也可以备一些脱水蔬菜和冻干蔬菜。</p><p>备一些干的菌类，比如香菇和茶树菇，可以用来煮汤。</p><p>备一些干的豆类，绿豆黄豆花生等等，绿豆能煮绿豆汤，黄豆花生能和肉类一起煮，绿豆黄豆还能自己泡绿豆芽和黄豆芽，补充蔬菜，甚至你可以买一瓶酒，花生米和酒绝配！</p><h3 id="肉类"><a href="#肉类" class="headerlink" title="肉类"></a>肉类</h3><p>猪肉鸡腿等等其他的肉，冰箱塞得进去酒多买些。如果像我一样冰箱的冷冻柜太小了，两包1kg的速冻饺子酒占满空间了，可以其他能在常温或保险柜保存的肉类。</p><p>可以在常温下保存的有午餐肉、腊肠、火腿肠、腊肉等等。</p><h3 id="调味"><a href="#调味" class="headerlink" title="调味"></a>调味</h3><p>油盐酱醋糖这些一般都是常备的问题不大，也不用当心保存问题。葱蒜姜的话，葱可以切碎装盒子冻起来，蒜头保存条件不苛刻，有花盆的话还可以种蒜，姜同样也可以切成姜丝冰冻起来，或者撒上盐用保鲜膜包起来放到阴凉的地方也能保存很久。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>烟酒咖啡。买不到也不是坏处，隔离一两个月，要是能把烟瘾戒了反而是好事，就是过程可能痛苦些。我这些都没上瘾，不过我还是买了酒，有时候失眠了，酒这玩意对我有奇效（仅代表个人）。</p><h3 id="药品"><a href="#药品" class="headerlink" title="药品"></a>药品</h3><p>常备各类瓶装维生素，蔬菜吃得不够补充维生素C，感冒药现在买不到了，不想去发热门诊就只能自己挺了。风油精提神驱蚊（这玩意也能吃的，能舒缓咽喉痛，但只能少量！）。</p><h2 id="日用品和垃圾处理"><a href="#日用品和垃圾处理" class="headerlink" title="日用品和垃圾处理"></a>日用品和垃圾处理</h2><p>大部分日用品还好，毕竟是日用，稍微多备些就行了。有一个问题是理发，从疫情以来我就开始尝试自己理发了，一开始理得很难看，多试几次就能理出一个不太难看的发型，这两年来我去理发店的次数屈指可数。</p><h3 id="理发"><a href="#理发" class="headerlink" title="理发"></a>理发</h3><p>理发工具买平剪和牙剪以及推子。推子都有限位梳子，推平头还是很容易的。我头发比较长，不剪平头，只能用平剪和牙剪自己剪，推子买来是想用来修一下边缘，结果发现没啥用，我用剪刀就够了，推子现在在吃灰。</p><h3 id="垃圾"><a href="#垃圾" class="headerlink" title="垃圾"></a>垃圾</h3><p>特别是餐厨垃圾，尤其尤其是水产品的垃圾，最好洗干净再扔垃圾桶。以广州现在的天气，今天吃鱼，过两天垃圾里就能收获一堆蛆宝宝，全是蛋白质......</p><p>以前很鄙视老人们喜欢在家里囤积很多东西，去抢一些小便宜，他们是经历过了特殊的年代才形成这样的观念。没想到在2022年的今天是因为疫情才有了危机的意识，都说要相信政府，在大陆你也只能相信这个政府，如何你发现有些问题靠不住，那就只能靠自己了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近上过网的都看到了上海的疫情负面新闻有多离谱，一个城市某些部件一旦停止运转，造成的结果将是灾难性的，而且这种这么荒唐的事情是发生在上海这样一个超一线城市，属实让人惊呆了。&lt;/p&gt;
&lt;p&gt;那么作为一个普通人该如果应对这种情况呢，中国大陆一直奉行着动态清零的政策，短期内政策是</summary>
      
    
    
    
    <category term="生活" scheme="https://zguishen.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="疫情" scheme="https://zguishen.com/tags/%E7%96%AB%E6%83%85/"/>
    
    <category term="生存" scheme="https://zguishen.com/tags/%E7%94%9F%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>再探枚举类Enum</title>
    <link href="https://zguishen.com/posts/6637eaeb.html"/>
    <id>https://zguishen.com/posts/6637eaeb.html</id>
    <published>2022-03-28T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>枚举类是 Java 很常见的类了，最近在推上看到一个很有意思的枚举用法，加上执行开发中碰到的枚举的一些问题，这里记录一下。</p><h3 id="枚举定义和使用场景"><a href="#枚举定义和使用场景" class="headerlink" title="枚举定义和使用场景"></a>枚举定义和使用场景</h3><p>枚举是一个被命名的整形常数的集合。在 Java 中，描述抽象的事物外面用类和接口，但有些特殊的类的属性是一组固定的常数集合，那么就可以用枚举来表示，典型的例子比如星期有周日到周一，人类的性别有男女...嗯，如果见过国外的一些网站可能会有一些跨性别或其他选项可选，不过还是一样是常数集合。</p><p>比如一个 Person 类，性别 gender 用0表示女的，1表示男的，在数据库字段也是存的0或1的tinyint类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//名字</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//性别：0女，1男</span></span><br><span class="line">    <span class="type">int</span> gender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getter/setter 省略</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式客户端拿到 Person 对象之后看到 gender 的值后，并不知道0或1代表什么，只能看注释或者文档。</p><p>使用 Enum 之后的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//名字</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//性别</span></span><br><span class="line">    Gender gender;</span><br><span class="line">    <span class="comment">//getter/setter/toString 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//性别枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line"></span><br><span class="line">    Female(<span class="number">0</span>),</span><br><span class="line">    Male(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gender;</span><br><span class="line">    Gender(<span class="type">int</span> gender) &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.setName(<span class="string">&quot;nathan&quot;</span>);</span><br><span class="line">    <span class="comment">//只能传入Gender存在的类型</span></span><br><span class="line">    p.setGender(Gender.Male);</span><br><span class="line"></span><br><span class="line">    System.out.println(p);</span><br><span class="line">    <span class="comment">//可以获知属性值代表什么类型</span></span><br><span class="line">    System.out.println(<span class="string">&quot;gender:&quot;</span> + p.getGender() + <span class="string">&quot;/value:&quot;</span> + p.getGender().getVal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，枚举类有三个好处。</p><ul><li>枚举也是类，可以有属性和方法</li><li>类型检查和有效性检查</li><li>本身就带有含义，不用像常量那样需要查询文档或注释才知道值定义</li></ul><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>之前在<a href="https://twitter.com/dblevins/status/1502481447935897601">推上</a>别人看到用 Enum 来简化时间解析，可以拥有类型和有效性检查的好处。用法是这样的;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DateUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    yyyy_MM_dd(<span class="string">&quot;yyyy-MM-dd&quot;</span>),</span><br><span class="line">    MMM_dd_yyyy(<span class="string">&quot;MMM dd, yyyy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DateTimeFormatter formatter;</span><br><span class="line"></span><br><span class="line">    DateUtil(<span class="keyword">final</span> String formatString) &#123;</span><br><span class="line">        formatter = DateTimeFormatter.ofPattern(formatString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDate <span class="title function_">parse</span><span class="params">(<span class="keyword">final</span> String string)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.parse(string, formatter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LocalDate date)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> formatter.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">parseDate</span><span class="params">(<span class="keyword">final</span> String string)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Date.from(parse(string).atStartOfDay()</span><br><span class="line">                .atZone(ZoneId.systemDefault())</span><br><span class="line">                .toInstant());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> Date date)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> format(date.toInstant()</span><br><span class="line">                .atZone(ZoneId.systemDefault())</span><br><span class="line">                .toLocalDate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//按照枚举定义的格式转化成LocalDate</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">parse</span> <span class="operator">=</span> DateUtil.yyyy_MM_dd.parse(<span class="string">&quot;2022-03-31&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把LocalDate转换成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> DateUtil.MMM_dd_yyyy.format(LocalDate.now());</span><br><span class="line">        System.out.println(format);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举的问题"><a href="#枚举的问题" class="headerlink" title="枚举的问题"></a>枚举的问题</h3><p>看过<a href="https://github.com/alibaba/p3c">《阿里巴巴Java开发手册》</a>应该注意到其中对枚举类的使用做了限制，二方库里可定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POLO 对象。原因是使用枚举作为返回值，若 RPC 客户端和服务端版本不一致的话，会造成反序列化异常。</p><p>以上面 Person 类为例，版本1的 Gender 属性有两个类型 Male 和 Female，将这个版本的 SDK 给客户端用。后来需求变化，版本2的 Gender 加了 Transgender，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line"></span><br><span class="line">    Female(<span class="number">0</span>),</span><br><span class="line">    Male(<span class="number">1</span>),</span><br><span class="line">    Transgender(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gender;</span><br><span class="line">    Gender(<span class="type">int</span> gender) &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果客户端还是使用旧的 SDK 的进行请求调用的话，涉及序列化就会出现错误。</p><p>以 Jackson 的序列化反序列化为例，Gender 新加类型序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版本2</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.setName(<span class="string">&quot;nathan&quot;</span>);</span><br><span class="line">p.setGender(Gender.Transgender);</span><br><span class="line"><span class="type">String</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(p);</span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;:&quot;nathan&quot;,&quot;gender&quot;:&quot;Transgender&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>客户端反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">pStr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;nathan\&quot;,\&quot;gender\&quot;:\&quot;Transgender\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> mapper.readValue(pStr, Person.class);</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct instance of com.review.enumtest.Gender from String value &#x27;Transgender&#x27;: value not one of declared Enum instance names: [Female, Male]</span><br><span class="line"> at [Source: &#123;&quot;name&quot;:&quot;nathan&quot;,&quot;gender&quot;:&quot;Transgender&quot;&#125;; line: 1, column: 17] (through reference chain: com.review.enumtest.Person[&quot;gender&quot;])</span><br></pre></td></tr></table></figure><p>解决方法就是接口返回值不要用枚举，或者客户端需要自行处理不存在枚举类型，比如转换成 null 或者设置为默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">pStr</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;nathan\&quot;,\&quot;gender\&quot;:\&quot;Transgender\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> mapper</span><br><span class="line">                .configure(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL, <span class="literal">true</span>)</span><br><span class="line">                .readValue(pStr, Person.class);</span><br></pre></td></tr></table></figure><p>两种处理方式的分歧是在认为枚举应不应该允许变化的，使用哪种看自己业务的需求。可以看看<a href="https://www.zhihu.com/question/52760637">知乎</a>上关于 Enum 反序列化问题的讨论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;枚举类是 Java 很常见的类了，最近在推上看到一个很有意思的枚举用法，加上执行开发中碰到的枚举的一些问题，这里记录一下。&lt;/p&gt;
&lt;h3 id=&quot;枚举定义和使用场景&quot;&gt;&lt;a href=&quot;#枚举定义和使用场景&quot; class=&quot;headerlink&quot; title=&quot;枚举定义和</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>播客</title>
    <link href="https://zguishen.com/posts/c26dad7c.html"/>
    <id>https://zguishen.com/posts/c26dad7c.html</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/202202/008r2nFzgy1gzsiyyyxz1j30l205wdg5.jpg" alt="podcast"><br>播客其实是一种诞生很久的数字媒体了，但相比于各类视频媒体尤其是短视频，显得比较小众，经常用的人好像不多。</p><p>一开始听到播客这东西的时候，还以为是“博客”的口误，后来真正接触到也是第一次用 Iphone 的时候。Iphone 默认安装就有一个播客应用，印象中在以前很长一段时间里面的中文内容都很溃泛，最近这些年中文播客发展较快，最近重新用上 Iphone 看到中文的播客已经非常丰富了。</p><p>重新关注播客是在之前搜索了解一些自由职业信息的时候，看到“捕蛇者说”这个播客的一期节目，突然发现这类媒体对于分享一些个人经历很合适，刚好我自己就是一个很自闭话少的人，听节目的时候可以想听一个老朋友讲故事一样轻松。</p><p>当然播客的内容很多，可以讲故事经历，可以说书谈古论今，也可以用来练习英语听力。这里列举最近在听的播客：</p><ul><li><a href="https://pythonhunter.org/">捕蛇者说</a> 一档关于编程、程序员和 Python 的播客。</li><li><a href="https://everybodyesl.simplecast.com/">Everybody ESL</a> The podcast for everybody who wants to improve their English, practice their English, or just learn more English.</li><li><a href="https://www.interviewpreparationsimplified.com/podcasts/">Job Interview Preparation Simplified</a> 关于面试准备的播客。</li></ul><p>播客的平台也有很多，国内有小宇宙、喜马拉雅、网易云等等，还有国外的 Spotify，Google Podcast，Spotify，Apple Podcast。一般还是推荐用外网的应用，IOS 用外区的账号，毕竟大陆的审核真的很烦，有些节目是听不到的，比如上面列举的 《Job Interview Preparation Simplified》国区账号下是搜不到的。</p><p>播客的优点也是缺点，就是它只有音频，虽然只能听，但相比视频更加方便而且不费眼睛。对于从事经常对着电脑工作的人群来说保护视力尤为重要，少看短视频听听播客更好，而且因为不需要对着手机电脑，可以在通勤路上听，解放双手，挤公交地铁更得劲，开车绝配。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/202202/008r2nFzgy1gzsiyyyxz1j30l205wdg5.jpg&quot; alt=&quot;podcast&quot;&gt;&lt;br&gt;播客其实是一种诞生很久的数字媒体了，但相比于各类视频媒体尤其是短视频，显得比较小众，经常用的人好像不多。&lt;</summary>
      
    
    
    
    <category term="生活" scheme="https://zguishen.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="播客" scheme="https://zguishen.com/tags/%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的协程</title>
    <link href="https://zguishen.com/posts/6ea62067.html"/>
    <id>https://zguishen.com/posts/6ea62067.html</id>
    <published>2022-02-04T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>协程很久之前就知到这东西，但是 Java 没有，也就没怎么去了解，最近在学 Python 接触到协程，做个记录。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>说到协程一般都会联系到进程和线程，通常请款下这三者的比较如下：</p><ul><li>进程：程序执行的一个实例，一个进程最少包含一个线程，不同进程之间的切换代价大；</li><li>线程：CPU 调度的基本单位，进程的一个实体，线程的上下文切换代价比进程小；</li><li>协程：是一种用户态的轻量级线程，一个线程可包含多个协程。</li></ul><p>协程的最大的优势是极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p><p>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p><h3 id="Python-中的协程"><a href="#Python-中的协程" class="headerlink" title="Python 中的协程"></a>Python 中的协程</h3><h4 id="生成器-generator-和-yield-关键字"><a href="#生成器-generator-和-yield-关键字" class="headerlink" title="生成器 generator 和 yield 关键字"></a>生成器 generator 和 yield 关键字</h4><p>如果一个函数定义中包含 yield 关键字，那这个函数就是一个 generator 函数。</p><p>yield 的语法规则是：在yield这里暂停函数的执行，并返回yield后面表达式的值（默认为 None），直到被 next() 方法再次调用时，从上次暂停的 yield 代码处继续往下执行。当没有可以继续 next() 的时候，抛出异常，该异常可被 for 循环处理。</p><p>每个生成器都可以执行 send() 方法，为生成器内部的 yield 语句发送数据。Python 对协程的支持是通过 generator 实现的。</p><p>看一个生产者和消费者的例子，生产者生产消息后 yield 跳转消费者消费，消费者执行后又跳回生产者继续生产，任务都在一个线程内部完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    r = <span class="string">&#x27;start task...&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 遇到 yield 语句返回，再次执行从上次返回的 yield 语句处继续执行</span></span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[CONSUMER] Consuming %s...&#x27;</span> % n)</span><br><span class="line">        r = <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">produce</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="comment"># 第一次运行生成器用 send() 函数，传入 None 参数启动生成器</span></span><br><span class="line">    <span class="built_in">print</span>(c.send(<span class="literal">None</span>))</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Producing %s...&#x27;</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">c = consumer()</span><br><span class="line">produce(c)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start task...</span><br><span class="line">[PRODUCER] Producing 1...</span><br><span class="line">[CONSUMER] Consuming 1...</span><br><span class="line">[PRODUCER] Consumer return: success</span><br><span class="line">[PRODUCER] Producing 2...</span><br><span class="line">[CONSUMER] Consuming 2...</span><br><span class="line">[PRODUCER] Consumer return: success</span><br><span class="line">[PRODUCER] Producing 3...</span><br><span class="line">[CONSUMER] Consuming 3...</span><br><span class="line">[PRODUCER] Consumer return: success</span><br></pre></td></tr></table></figure><h4 id="asyncio-coroutine-和-yield-from"><a href="#asyncio-coroutine-和-yield-from" class="headerlink" title="@asyncio.coroutine 和 yield from"></a>@asyncio.coroutine 和 yield from</h4><p>@asyncio.coroutine 标记一个生成器为协程，yield from 即等待另一个协程的返回。asyncio 是 Python3.4 开始引入的一个基于时间循环的异步 IO 模块</p><p>asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个 EventLoop 的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步 IO。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio, datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start: &#123;&#125; Time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, datetime.datetime.now()))</span><br><span class="line">    <span class="comment"># 延时模拟 IO 任务，比如网络请求或者写文件等等</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;continue other task: &#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End: &#123;&#125; Time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, datetime.datetime.now()))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [task(<span class="string">&#x27;t1&#x27;</span>), task(<span class="string">&#x27;t2&#x27;</span>)] </span><br><span class="line"><span class="comment">#loop.run_until_complete(asyncio.wait(tasks))</span></span><br><span class="line"><span class="comment"># wait 和 gather 返回值有所不同</span></span><br><span class="line">loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/coroutin/test.py:6: DeprecationWarning: &quot;@coroutine&quot; decorator is deprecated since Python 3.8, use &quot;async def&quot; instead</span><br><span class="line">  def task(name):</span><br><span class="line">Start: t1 Time: 2022-02-26 00:43:01.195497</span><br><span class="line">Start: t2 Time: 2022-02-26 00:43:01.196419</span><br><span class="line">continue other task:  t1</span><br><span class="line">End: t1 Time: 2022-02-26 00:43:03.199804</span><br><span class="line">continue other task:  t2</span><br><span class="line">End: t2 Time: 2022-02-26 00:43:03.200136</span><br></pre></td></tr></table></figure><p>这里环境用的是 Python3.8，可以看到警告，新版本不推荐用 <code>@coroutine</code>，可以用 <code>async def</code> 来定义协程。</p><h4 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio, datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start: &#123;&#125; Time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, datetime.datetime.now()))</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait([ioTask(name)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;continue other task: &#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End: &#123;&#125; Time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, datetime.datetime.now()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">ioTask</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 延时模拟 IO 任务，比如网络请求或者写文件等等</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;execute io task: &#x27;</span>, name)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [task(<span class="string">&#x27;t1&#x27;</span>), task(<span class="string">&#x27;t2&#x27;</span>)] </span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Start: t2 Time: 2022-02-26 00:46:01.575044</span><br><span class="line">Start: t1 Time: 2022-02-26 00:46:01.575539</span><br><span class="line">execute io task:  t2</span><br><span class="line">execute io task:  t1</span><br><span class="line">continue other task:  t2</span><br><span class="line">End: t2 Time: 2022-02-26 00:46:03.580642</span><br><span class="line">continue other task:  t1</span><br><span class="line">End: t1 Time: 2022-02-26 00:46:03.580710</span><br></pre></td></tr></table></figure><p>适合 IO 密集型，不适合 CPU 密集型应用</p><h3 id="Java-为什么没有协程"><a href="#Java-为什么没有协程" class="headerlink" title="Java 为什么没有协程"></a>Java 为什么没有协程</h3><p>在当前已发行版 Java 中，还没有协程，通常使用协程的意义是为了节省创建和切换线程带来的开销，但是在 Java 一直都有其他的解决方式，比如：</p><ul><li>有 Netty 这类非阻塞的I&#x2F;O客户端-服务器框架；</li><li>线程池解决了线程创建和销毁的开销；</li><li>JDK 也有 JUC 等完备的工具用于异步编程。</li></ul><p>其他语言使用协程最大的好处是写法简单优雅，写起来是同步的，跑起来是异步的。相比之下 Java 的异步线程写法就复杂得多，而且 Java 一直以来都被吐槽太过繁琐。</p><p>目前 Java 也有在推动协程库的开发，这个就是 <a href="https://jdk.java.net/loom/">Loom</a> 项目，目前还在开发阶段。</p><ul><li>[1] <a href="https://docs.python.org/zh-cn/3/library/asyncio.html#module-asyncio">asyncio --- 异步 I&#x2F;O Python 3.10.2 文档</a></li><li>[2] <a href="https://www.liujiangblog.com/course/python/83">协程与异步IO</a></li><li>[3] <a href="https://www.zhihu.com/question/342525260/answer/820437729">什么情况下需要使用 Python 的 asyncio 模块</a></li><li>[4] <a href="https://www.zhihu.com/question/332042250">为什么 Java 坚持多线程不选择协程？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;协程很久之前就知到这东西，但是 Java 没有，也就没怎么去了解，最近在学 Python 接触到协程，做个记录。&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;说到协程一般</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
    <category term="协程" scheme="https://zguishen.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://zguishen.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>把 Tiddlywiki 整合到 Hexo 中一起部署</title>
    <link href="https://zguishen.com/posts/f690ac06.html"/>
    <id>https://zguishen.com/posts/f690ac06.html</id>
    <published>2022-01-19T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>最近在找一款 wiki 用来记录一些系统化的知识和笔记，发现了 <a href="https://tiddlywiki.com/">TiddlyWiki</a> 这个东西。TiddlyWiki 是一个仅由单个 HTML 文件组成的非网络应用的 Wiki 程序，不依赖数据库存储数据，非常有特色，能装插件，玩法也比较多。</p><p>后来想到既然最后发布到互联网都是静态文件，那就放到 Hexo 一起部署好了，不需要再搞一个服务来放 TiddlyWiki 的单 HTML 文件了。</p><p>我们可以将 TiddlyWiki 的单 HTML 文件放到 Hexo 的 public&#x2F;wiki 文件夹中，在网站放个 &#x2F;wiki 入口，随着 Hexo 的提交部署就可以访问了。但随着 wiki 越写越多，生成的单 HTML 文件越来越大，push 也慢，我们不用这种方式。其实我们只关心写东西，其他麻烦的事情全都交给 GitHub Action 或其他自动化部署工具来做就行了。下面是整合的步骤。</p><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>先安装 TiddlyWiki：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g tiddlywiki</span><br><span class="line">tiddlywiki  --version</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下初始化一个 TiddlyWiki：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tiddlywiki tiddlywiki --init server</span><br></pre></td></tr></table></figure><p>我们写的 wiki 的源文件就放在 tiddlywiki&#x2F;tiddlers 文件夹中，类似 Hexo 的 source&#x2F;_posts 文件夹。</p><h3 id="修改-GitHub-Action-脚本"><a href="#修改-GitHub-Action-脚本" class="headerlink" title="修改 GitHub Action 脚本"></a>修改 GitHub Action 脚本</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hexo-blog</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">hexo-blog</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span> </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;xx@xx.com&quot;</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;yourname&quot;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install tiddlywiki -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          tiddlywiki tiddlywiki --build index</span></span><br><span class="line"><span class="string">          mkdir public/tiddlywiki</span></span><br><span class="line"><span class="string">          mv tiddlywiki/output/index.html public/tiddlywiki</span></span><br><span class="line"><span class="string">          hexo d</span></span><br></pre></td></tr></table></figure><ul><li><code>npm install tiddlywiki -g</code> 把 tiddlywiki 也装上</li><li><code>hexo g</code> 执行生成静态文件到 public 文件夹中；</li><li><code>tiddlywiki tiddlywiki --build index</code> 输出 index.html 文件到 tiddlywiki&#x2F;output 文件夹；</li><li>在 public 创建 tiddlywiki 文件夹，再把 index.html 移过来就完事了。</li></ul><p>还有另外一种方法可以先在 source 文件夹下创建 wiki 目录，然后修改 GitHub Action 脚本，先生成 index.html 文件，然后移动到 source&#x2F;tiddlywiki 目录下，然后再 <code>hexo g</code> 编译也行，大概改成这样，自行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: Hexo deploy</span><br><span class="line">  run: |</span><br><span class="line">    hexo clean</span><br><span class="line">    <span class="built_in">mkdir</span> <span class="built_in">source</span>/tiddlywiki</span><br><span class="line">    tiddlywiki tiddlywiki --build index</span><br><span class="line">    <span class="built_in">mv</span> tiddlywiki/output/index.html <span class="built_in">source</span>/tiddlywiki</span><br><span class="line">    <span class="comment"># hexo g 应该都可以不写了</span></span><br><span class="line">    hexo g</span><br><span class="line">    hexo d</span><br></pre></td></tr></table></figure><p>不过要设置下 Hexo 不要把 index.html 也编译了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml skip_render 配置，编译渲染忽略 v 下的所有文件</span></span><br><span class="line">skip_render: [tiddlywiki/**]</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><a href="https://zguishen.com/">主页</a></li><li><a href="https://zguishen.com/tiddlywiki/">wiki</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] <a href="https://zguishen.com/posts/936b5ee4.html">Hexo 自动化部署的参考 GitHub Actions deploy Hexo blog</a></li><li>[2] <a href="https://zh.wikipedia.org/wiki/Tiddlywiki">Tiddlywiki - 维基百科，自由的百科全书</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在找一款 wiki 用来记录一些系统化的知识和笔记，发现了 &lt;a href=&quot;https://tiddlywiki.com/&quot;&gt;TiddlyWiki&lt;/a&gt; 这个东西。TiddlyWiki 是一个仅由单个 HTML 文件组成的非网络应用的 Wiki 程序，不依赖数据库存</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Tiddlywiki" scheme="https://zguishen.com/tags/Tiddlywiki/"/>
    
    <category term="Hexo" scheme="https://zguishen.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Setup your own KMS server</title>
    <link href="https://zguishen.com/posts/8083e521.html"/>
    <id>https://zguishen.com/posts/8083e521.html</id>
    <published>2022-01-15T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>I have setup a KMS server on my CentOS VPS, it allows me to significantly simply the process of activating Microsoft products on the corporate network.</p><p>Here are the installation steps:</p><h3 id="Firstly-download-the-latest-version-of-vlmcsd-and-unzip"><a href="#Firstly-download-the-latest-version-of-vlmcsd-and-unzip" class="headerlink" title="Firstly, download the latest version of vlmcsd and unzip."></a>Firstly, download the latest version of <a href="https://github.com/Wind4/vlmcsd">vlmcsd</a> and unzip.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># find latest version on https://github.com/Wind4/vlmcsd/releases</span></span><br><span class="line">wget https://github.com/Wind4/vlmcsd/releases/download/svn1113/binaries.tar.gz</span><br><span class="line">tar -zxvf binaries.tar.gz</span><br><span class="line"><span class="comment"># according your OS and CPU type</span></span><br><span class="line"><span class="built_in">cd</span> binaries/Linux/intel/static/</span><br></pre></td></tr></table></figure><p>Startup vlmcsd with command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./vlmcsd-x64-musl-static -L 0.0.0.0:xxxx</span><br><span class="line"><span class="comment"># if you not use -L, default port is 1688</span></span><br><span class="line"><span class="comment"># ./vlmcsd-x64-musl-static -L 0.0.0.0:16882</span></span><br></pre></td></tr></table></figure><p>Just use the IP+Port is all right, certainly you can also bind domain by Nginx forward.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  kms.example.com;</span><br><span class="line">        location ^~ / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:1688/;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Secondly-check-availability"><a href="#Secondly-check-availability" class="headerlink" title="Secondly check availability."></a>Secondly check availability.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># other port ./vlmcs-x64-musl-static 0.0.0.0:16882</span></span><br><span class="line"><span class="comment"># default</span></span><br><span class="line">$ ./vlmcs-x64-musl-static</span><br><span class="line">Connecting to 0.0.0.0:1688 ... successful</span><br><span class="line">Sending activation request (KMS V6) 1 of 1  -&gt; 03612-00206-566-464396-03-1103-14393.0000-2672021 (3A1C049600B60076)</span><br></pre></td></tr></table></figure><p>On Windows open CMD, enter <code>\binaries\Windows\intel</code> directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vlmcs-Windows-x86.exe [IP or domain]:[Port]</span><br></pre></td></tr></table></figure><h3 id="Finally-activate-Windows-x2F-Office"><a href="#Finally-activate-Windows-x2F-Office" class="headerlink" title="Finally activate Windows&#x2F;Office"></a>Finally activate Windows&#x2F;Office</h3><p>Find the Vol key that corresponds to <a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">Windows</a> or <a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks">Office</a> (make sure the Office is Vol version).</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Install the key you find above:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</span><br></pre></td></tr></table></figure><p>Set KMS server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms [IP或domain]:[端口号]</span><br></pre></td></tr></table></figure><p>Activate OS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><h4 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h4><p>Go to the Office installation directory, for example the default for 64-bit Office 2016 is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Office\Office16</span><br></pre></td></tr></table></figure><p>Install the key you find above:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /inpkey:xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</span><br></pre></td></tr></table></figure><p>Run CMD with administrator, and registry KMS server address:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:[domain]</span><br><span class="line"># if you use other port, set ip and port separately</span><br><span class="line"># cscript ospp.vbs /sethst:[IP]</span><br><span class="line"># cscript ospp.vbs /setprt:[Port]</span><br></pre></td></tr></table></figure><p>Activate Office：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure><p>查看激活信息：</p><p>View activation info:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure><h3 id="Registry-service"><a href="#Registry-service" class="headerlink" title="Registry service"></a>Registry service</h3><p>The KMS method of activation is valid for 180 days, so keep the vlmcsd service running, it will request a renewal automatically.</p><p>Create a <code>vlmcsd.service</code> file and edit.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=KMS Server By vlmcsd</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/vlmcsd.pid</span><br><span class="line"><span class="comment"># ExecStart=/home/nathan/app/binaries/Linux/intel/static/vlmcsd-x64-musl-static -L 0.0.0.0:16882 -p /var/run/vlmcsd.pid</span></span><br><span class="line">ExecStart=/binaries/Linux/intel/static/vlmcsd-x64-musl-static -p /var/run/vlmcsd.pid</span><br><span class="line">ExecStop=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Configure vlmcsd as a system service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> vlmcsd.service /etc/systemd/system/</span><br></pre></td></tr></table></figure><p>Then you can Manage vlmcsd service with <code>systemctl</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reload </span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># Turn on boot up</span></span><br><span class="line">systemctl <span class="built_in">enable</span> vlmcsd</span><br><span class="line"><span class="comment"># startup</span></span><br><span class="line">systemctl start vlmcsd</span><br><span class="line"><span class="comment"># running info</span></span><br><span class="line">systemctl status vlmcsd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I have setup a KMS server on my CentOS VPS, it allows me to significantly simply the process of activating Microsoft products on the corp</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="KMS" scheme="https://zguishen.com/tags/KMS/"/>
    
    <category term="Windows 激活" scheme="https://zguishen.com/tags/Windows-%E6%BF%80%E6%B4%BB/"/>
    
    <category term="Office 激活" scheme="https://zguishen.com/tags/Office-%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Redis systemd 服务和 daemon no 配置的冲突问题</title>
    <link href="https://zguishen.com/posts/f15a7dce.html"/>
    <id>https://zguishen.com/posts/f15a7dce.html</id>
    <published>2022-01-15T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 虚拟机安装 Reis，<code>sudo apt install redis -y</code>。</p><p>然后照着以前的经验修改了配置文件<code>/etc/redis/redis.conf</code>，关闭保护模式，设置守护线程，去掉外网访问限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># By default protected mode is enabled. You should disable it only if</span></span><br><span class="line"><span class="comment"># you are sure you want clients from other hosts to connect to Redis</span></span><br><span class="line"><span class="comment"># even if no authentication is configured, nor a specific set of interfaces</span></span><br><span class="line"><span class="comment"># are explicitly listed using the &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment">#protected-mode yes</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># daemonize yes</span></span><br><span class="line"><span class="comment"># apt 安装方式这里默认是 yes 开启守护线程，改错的就是这个地方</span></span><br><span class="line"><span class="comment"># 但是自己手动官网下压缩包这个值是 no，才要改成 yes</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span><br><span class="line"><span class="comment"># JUST COMMENT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1 ::1</span></span><br></pre></td></tr></table></figure><p>因为当时没有立刻重启验证没发现问题，后来过几天用到了 Redis 测试能直接连接就直接用了。然后在跑项目的时候就出问题了。项目中有用到 Lua 脚本，项目刚启动的时候没问题，但过一两分钟就会报 <code>NOSCRIPT No matching script. Please use EVAL</code> 脚本找不到的问题，在服务器上查询脚本是否存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT EXISTS 54a45387997c486efb954b3bf990f34881e41b7a</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SCRIPT EXISTS 54a45387997c486efb954b3bf990f34881e41b7a</span><br><span class="line">1) (<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>项目启动加载 Lua 脚本到 Redis 一开始存在，一会就没了，奇怪，看看 systemd status：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status redis-server.service</span><br><span class="line">● redis-server.service - Advanced key-value store</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: activating (start) since Mon 2022-01-17 22:16:03 CST; 54s ago</span><br><span class="line">       Docs: http://redis.io/documentation,</span><br><span class="line">             man:redis-server(1)</span><br><span class="line">Cntrl PID: 14160 (redis-server)</span><br><span class="line">      Tasks: 4 (<span class="built_in">limit</span>: 4612)</span><br><span class="line">     Memory: 1.9M</span><br><span class="line">     CGroup: /system.slice/redis-server.service</span><br><span class="line">             └─14160 /usr/bin/redis-server *:6379</span><br><span class="line"></span><br><span class="line">Jan 17 22:16:03 vb-ubuntu systemd[1]: Starting Advanced key-value store...</span><br></pre></td></tr></table></figure><p>还在 activating 中，但此时 Redis 是已经可以访问的了，再看看 journalctl 的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -b -u redis-server</span><br><span class="line">-- Logs begin at Tue 2021-11-16 10:31:34 CST, end at Mon 2022-01-17 22:30:57 CST. --</span><br><span class="line">Jan 16 16:49:47 vb-ubuntu systemd[1]: Starting Advanced key-value store...</span><br><span class="line">Jan 16 16:51:18 vb-ubuntu systemd[1]: redis-server.service: start operation timed out. Terminating.</span><br><span class="line">Jan 16 16:51:18 vb-ubuntu systemd[1]: redis-server.service: Failed with result <span class="string">&#x27;timeout&#x27;</span>.</span><br><span class="line">Jan 16 16:51:18 vb-ubuntu systemd[1]: Failed to start Advanced key-value store.</span><br><span class="line">Jan 16 16:51:19 vb-ubuntu systemd[1]: redis-server.service: Scheduled restart job, restart counter is at 1.</span><br><span class="line">Jan 16 16:51:19 vb-ubuntu systemd[1]: Stopped Advanced key-value store.</span><br></pre></td></tr></table></figure><p>可以看到 Failed with result &#39;timeout&#39; 后接着 Scheduled restart job，Redis 重启，一直循环反复。Redis   持久化并没有保存 Lua 脚本的，重启后就会丢失，所有项目会有脚本找不到的问题。</p><p>此时问题很清晰了，应该是改了一些配置导致出问题，先看看 Redis 服务的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/systemd/system/redis.service</span></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/redis-server /etc/redis/redis.conf</span><br><span class="line">PIDFile=/run/redis/redis-server.pid</span><br><span class="line">TimeoutStopSec=0</span><br><span class="line">Restart=always</span><br><span class="line">Restart=no</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=2755</span><br></pre></td></tr></table></figure><p><code>Restart=always</code> 服务启动失败了也会一直尝试重启。<code>Type=forking</code> 和 <code>/etc/redis/redis.conf</code> 中的 <code>daemonize no</code> 冲突了。</p><p><code>man systemd.service</code> 可以看 Type 为 forking 的解释：如果设为 forking ，那么表示 ExecStart&#x3D; 进程将会在启动过程中使用 fork() 系统调用。 也就是当所有通信渠道都已建好、启动亦已成功之后，父进程将会退出，而子进程将作为主服务进程继续运行。 这是传统UNIX守护进程的经典做法。 在这种情况下，systemd 会认为在父进程退出之后，该服务就已经启动完成。 如果使用了此种类型，那么建议同时设置 PIDFile&#x3D; 选项，以帮助 systemd 准确可靠的定位该服务的主进程。 systemd 将会在父进程退出之后 立即开始启动后继单元。</p><p>“父进程将会退出，而子进程将作为主服务进程继续运行”，所以 Redis 设置为非守护进程就有问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ubuntu 虚拟机安装 Reis，&lt;code&gt;sudo apt install redis -y&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后照着以前的经验修改了配置文件&lt;code&gt;/etc/redis/redis.conf&lt;/code&gt;，关闭保护模式，设置守护线程，去掉外网访问限</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Redis" scheme="https://zguishen.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>升级一下 Hexo</title>
    <link href="https://zguishen.com/posts/6821e493.html"/>
    <id>https://zguishen.com/posts/6821e493.html</id>
    <published>2022-01-03T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 提醒 Hexo 有一个安全问题 <a href="https://github.com/hexojs/hexo/issues/4838">CVE-2021-25987</a>，需要升级到最新版本。</p><p>把 package.json 修改 Hexo 版本为 6.0.0，推送看 GitHub Action 任务，有错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">WARN  Deprecated config detected: <span class="string">&quot;external_link&quot;</span> with a Boolean value is deprecated. See https://hexo.io/docs/configuration <span class="keyword">for</span> more details.</span><br><span class="line">FATAL TypeError: Object.fromEntries is not a <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p>一个是 external_link 属性要过时了的警告，一个是函数不存在问题。</p><p>看下 Hexo 的<a href="https://hexo.io/docs/configuration#Writing">配置文档</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">external_linkOpen external links <span class="keyword">in</span> a new tab?</span><br><span class="line">external_link.enableOpen external links <span class="keyword">in</span> a new tab?<span class="literal">true</span></span><br><span class="line">external_link.fieldApplies to the whole site or post onlysite</span><br><span class="line">external_link.excludeExclude hostname. Specify subdomain when applicable, including www[]</span><br></pre></td></tr></table></figure><p>external_link 配置有变化，在 _config.yml 改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">external_link:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  field: site <span class="comment"># Apply to the whole site</span></span><br><span class="line">  exclude: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>另一个错误 Object.fromEntries is not a function，是因为 Nodejs 版本低了，需要 12.x 以上版本才行。</p><p>修改自动化部署配置文件 HexoCI.yml，Nodejs 版本改成 12.x。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: Setup node </span><br><span class="line">  uses: actions/setup-node@v1</span><br><span class="line">  with:</span><br><span class="line">    node-version: &#x27;12.x&#x27;</span><br></pre></td></tr></table></figure><p>package.json 中一些比较老的依赖也可以随手升级下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\application\hexo&gt;npm outdated</span><br><span class="line">Package                       Current  Wanted  Latest  Location  Depended by</span><br><span class="line">hexo                          MISSING   6.0.0   6.0.0  -         hexo</span><br><span class="line">hexo-abbrlink                 MISSING   2.2.1   2.2.1  -         hexo</span><br><span class="line">hexo-deployer-git             MISSING   0.2.0   3.0.0  -         hexo</span><br><span class="line">hexo-generator-archive        MISSING   0.1.5   1.0.0  -         hexo</span><br><span class="line">hexo-generator-baidu-sitemap  MISSING   0.1.9   0.1.9  -         hexo</span><br><span class="line">hexo-generator-category       MISSING   0.1.3   1.0.0  -         hexo</span><br><span class="line">hexo-generator-feed           MISSING   1.2.2   3.0.0  -         hexo</span><br><span class="line">hexo-generator-index          MISSING   0.2.1   2.0.0  -         hexo</span><br><span class="line">hexo-generator-json-content   MISSING   3.0.1   4.2.3  -         hexo</span><br><span class="line">hexo-generator-search         MISSING   2.4.3   2.4.3  -         hexo</span><br><span class="line">hexo-generator-sitemap        MISSING   1.2.0   2.2.0  -         hexo</span><br><span class="line">hexo-generator-tag            MISSING   0.2.0   1.0.0  -         hexo</span><br><span class="line">hexo-renderer-ejs             MISSING   0.2.0   2.0.0  -         hexo</span><br><span class="line">hexo-renderer-marked          MISSING  0.2.11   4.1.0  -         hexo</span><br><span class="line">hexo-renderer-pug             MISSING   0.0.5   2.0.0  -         hexo</span><br><span class="line">hexo-renderer-sass            MISSING   0.3.2   0.4.0  -         hexo</span><br><span class="line">hexo-renderer-scss            MISSING   1.2.0   1.2.0  -         hexo</span><br><span class="line">hexo-renderer-stylus          MISSING   0.3.3   2.0.1  -         hexo</span><br><span class="line">hexo-server                   MISSING   0.2.2   3.0.0  -         hexo</span><br><span class="line">node-sass                     MISSING   5.0.0   7.0.1  -         hexo</span><br></pre></td></tr></table></figure><p>我懒得升级，等有问题再看吧。</p><h3 id="2022-03-06-升级"><a href="#2022-03-06-升级" class="headerlink" title="2022-03-06 升级"></a>2022-03-06 升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="comment"># 升级覆盖安装</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 新建目录初始化 hexo</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment"># 再看下版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>之前的版本 hexo 一些依赖可能已经没用了，比如 <code>node-sass</code> 早该弃用了。备份 package.json，把刚刚初始化的新的 package.json 复制过来，如果有用到 hexo 默认安装以外的插件，手动添加上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要看下三方插件用不用升级</span></span><br><span class="line"><span class="comment"># 没有新增其他依赖下面两个命令就不用执行了</span></span><br><span class="line">npm outdated</span><br><span class="line">npm install -save</span><br></pre></td></tr></table></figure><p>例如我自己的 package.json 整理后：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-abbrlink&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>比默认 hexo 多加了 hexo-deployer-git 和 hexo-abbrlink 依赖，去掉了 hexo-theme-landscape 主题依赖，因为用了其他主题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub 提醒 Hexo 有一个安全问题 &lt;a href=&quot;https://github.com/hexojs/hexo/issues/4838&quot;&gt;CVE-2021-25987&lt;/a&gt;，需要升级到最新版本。&lt;/p&gt;
&lt;p&gt;把 package.json 修改 Hexo 版</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="blog" scheme="https://zguishen.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://zguishen.com/posts/a23e5172.html"/>
    <id>https://zguishen.com/posts/a23e5172.html</id>
    <published>2021-12-12T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来我都懒得写年终总结，因为之前在公司上班的时候大多时候过得浑浑噩噩，一年下来都想不到有什么好说的事情，今年有充分的时间做自己想做的事情，思考更多的问题，所以有一些东西可以写下来，内容不局限于2021年，会包括2020的下半年，不以线性时间而是按照分类来写。</p><p>2020 年从待了近三年的公司离职之后玩了几个月，在11月入职了在信息港一家公司一个多月后又离职了。之所以会去信息港这家公司是因为当时没有继续找更适合自己的公司，妥协之下入职，结果发现公司不管从职场生活到编码开发，自己都与之格格不入。后面离职之后到目前都没找工作上班，真心觉得找工作不应该过于急躁，特别是空档期有几个月的时候更不应该急，如果对自己有信心，觉得真不行的 offer 宁愿拒掉也不应该去。</p><p>在没上班的时候，2021年我有了大量的时间去做一些事情，除了玩之外看了许多的书，整理了许多知识资料，开始更加关注英语的学习，以及思考自己接下来应该做什么。这些资料大部分放在Notion上<a href="https://notion.zguishen.com/">我的主页</a>和GitHub上。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>首先先说过去一年看了什么书，过去一年看的书种类主要包括小说、计算机技术、心理健康和投资。</p><p>小说类主要是看网络小说，而且是看了以前看过的，有《<a href="https://book.douban.com/subject/10795878/">仙逆</a>》、《<a href="https://book.douban.com/subject/26734228/">鬼吹灯</a>》、《<a href="https://book.douban.com/subject/4737329/">龙族</a>》和《<a href="https://book.douban.com/subject/4737329/">挪威的森林</a>》等。看以前的网络小说但已经找不回来初高中在诺基亚手机上用 Anyview 看小说的狂热的感觉了，所以看了一半就弃了，更多的感觉是幼稚和肤浅。《鬼吹灯》相比较而言就好多了，时隔多年依旧觉得是一部奇妙的盗墓猎奇小说，但是有个严重的问题是在正版平台比如京东阅读或者多看阅读上，关于文革时期的描述的东西有不少的删减，实在无语，只能去网盘里找十年前存的txt版本。《挪威的森林》其实早就有看过，只是没看下去看完，一直给我印象是难以理解。这次才看完有些感触，可能是随着年龄增加共情能力有所提升，成长的烦恼人人都有，各有不同，有的人选择结束自己的生命，有的人冰冷地路过这个世界。</p><p>近几年的基金很火，特别是酱香科技都出名了，所以自己想买些股票和基金，但是自己完全不懂，之前大部分存款都是放在余额宝和京东的银行精选里面，完全没接触过股票和指数基金。为了了解一些基本的投资概念，看了几本书，有《<a href="https://book.douban.com/subject/27104764/">经济学通识课</a>》（还没看完）、《<a href="https://book.douban.com/subject/1021346/">股票作手回忆录</a>》和《<a href="https://book.douban.com/subject/1033778/">富爸爸，穷爸爸</a>》，应该很多人都看过了。</p><p>心理学方面看的书有《<a href="https://book.douban.com/subject/35143790/">蛤蟆先生去看心理医生</a>》和《<a href="https://book.douban.com/subject/26369699/">被讨厌的勇气：“自我启发之父”阿德勒的哲学课</a>》。我因为很久没上班经常会怀疑自己，自闭沮丧，情绪低落，人有时候难免会有焦虑抑郁的情绪，特别是在当下疫情，许多人都有过隔离或者孤独的远程办公经历，心情不好的时候不妨可以看看蛤蟆这本书，还挺有意思的。</p><p>技术类书籍有《<a href="https://juejin.cn/book/6844733769996304392">MySQL 是怎样运行的：从根儿上理解 MySQL</a>》，这是掘金的一本付费的小册子，想快速了解 MySQL 可以看看；算法相关的书有《<a href="https://book.douban.com/subject/33420587/">漫画算法：小灰的算法之旅</a>》和《<a href="https://book.douban.com/subject/27008702/">剑指Offer</a>》，《<a href="https://book.douban.com/subject/19952400/">算法（第4版）</a>》没看完；《<a href="https://book.douban.com/subject/30329536/">数据密集型应用系统设计</a>》是很多人强力推荐的书了，GitHub 上有正在翻译的中文版本 <a href="https://github.com/Vonng/ddia">ddia</a>，中文我只粗略看过一遍，这类技术书籍能看英语版还是去看英文版的，，我也准备再看一遍英文原版的。</p><p>英语学习相关的书籍有《<a href="https://book.douban.com/subject/30325761/">人人都用英语</a>》、《<a href="https://book.douban.com/subject/3860425/">開明英文文法</a>》和《<a href="https://book.douban.com/subject/1291278/">新编英语阅读手册</a>》,后面两本语法工具书未看完。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>2020年12月离职之后我就一直在补开发相关的知识。首先是算法方面的，从大学嵌入式转软件开发的时候并未关注和系统学过算法，但是现在基本上大厂的面试都会来两道算法题，就算不去大厂，作为开发人员也要了解一些基本算法，年初的时候看了一些算法书，花了大概一个月时间看了《剑指offer》并且在 LeetCode 上把70道刷了一遍，不得不说，刷算法题还是有些用的，不是为了面试，锻炼思维逻辑和编码能力都有用。</p><p>后来又整理了一波Java面试的八股文资料放在GitHub仓库上<a href="https://github.com/zgshen/code-note">code-note</a>，很多人都在说面试考八股文没意义，只会背不掌握这些知识的确没意义，大伙都喜欢问这些，总得会。</p><p>今年在整理知识时大量查找资料，特别是墙外的资料时，越发感觉英语的重要性。此外，在看各种远程办公招聘机会时，支持远程的公司大多是外企，不会英语意味着跟这些工作岗位无缘。记得去年有次到一家外企面试，笔试全是英文，没意外直接挂掉了。后来思考了<a href="https://zguishen.com/posts/7c215c5f.html">学英语的一些想法</a>，觉得学英语的最好方式是使用英语，开始刻意地制造一个英文环境。我重新背了一遍四级词汇，将手机和PC的语言全改成英文，并打算不再在 LeetCode 中国站而是在英文站上刷算法题，强迫自己接触和使用更多的英语。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>年初的时候还尝试转移到Linux下办公，实际体验下来Linux确实适合编程，但是办公很难离开微信和office这些软件，一些问题也很折腾，当时还记录了<a href="https://zguishen.com/posts/2277194.html">Ubuntu 桌面版的一些常规配置</a>。而且Linux的桌面环境相比较Windows和macOS没有优势，真能说够用，后来还是换回Windows了。</p><p>Windows 下有Linux子系统wsl，但是wsl2 小问题很多，IP不固定，Docker也有问题等等。wsl2只适合想有个简单的 Linux 开发环境的情况使用，一旦要干更多的事情还是使用虚拟机更好 。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="做饭"><a href="#做饭" class="headerlink" title="做饭"></a>做饭</h3><p>疫情以来开始自己学习做饭，没上班后每天最大的事情就是今天吃什么，每天都变着法子做各种各样的菜，只是大部分做得有点难吃。自己做饭一开始是去超市买东西，后来发现美团叮咚这些线上买菜平台更便宜，之后大部分时候都是在美团上买菜了。自己做饭能省下不少钱，而且更健康。</p><h3 id="身体问题"><a href="#身体问题" class="headerlink" title="身体问题"></a>身体问题</h3><p>脊椎问题是程序员的职业病了，去年的时候脊椎明显不适去医院拍了片，医生告诉我脊椎脖子已经有些问题，如果不再注意，下次来医院就是来做手术了。</p><p>年初的时候去光华医院问做牙齿矫正，先是一次性把四颗智齿全拔了，还补了两颗牙，然后开始做矫正，矫正需要一年半的时间。</p><p>8月的时候去中山三院皮肤科看脸部痤疮的问题，也写一篇日志<a href="https://zguishen.com/posts/227062ab.html">痤疮治疗经历</a>，上周刚写的。</p><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><p>虽然又大把的时间，但是今年游戏反而玩得少了，我的PC和PS4已经好几个月没开机了。今年玩的让我印象深刻的游戏有：</p><ul><li><a href="https://store.steampowered.com/app/447530">VA-11 Hall-A: Cyberpunk Bartender Action</a></li><li><a href="https://store.steampowered.com/app/206440">To the Moon</a></li><li><a href="https://www.playstation.com/zh-hant-tw/games/the-last-of-us-part-ii/">The Last of Us Part II</a></li></ul><p>我不是很喜欢旅行，所以这么多年来都没自己出过省去旅行，即使在广州八年了本地的许多景点我都没去过。最近买了个<a href="https://zguishen.com/posts/b4cd3869.html">松下 DMC-LX10 卡片机</a>，打算以后要多出去走走，好好看一看广州。今年去过的地方：</p><ul><li><a href="https://zguishen.com/posts/b354297a.html">广东省博物馆</a>。省博去过三次了，还是比较喜欢博物馆。</li><li><a href="https://zguishen.com/posts/b4cd3869.html">海珠湖</a></li><li><a href="https://twitter.com/gangan262/status/1468918817455689728?s=20">中山纪念堂-越秀公园-流花湖公园</a></li></ul><h2 id="总结和新年期望"><a href="#总结和新年期望" class="headerlink" title="总结和新年期望"></a>总结和新年期望</h2><p>在新冠疫情爆发后的一年，整个世界都发生了巨大的变化，即使你再宅，不想住关注外界的变化，变化也会影响到你。在互联网上我一直以来都尽量避免键政，但是“你不去找政治，政治就会来找你”，有社区里的民警直接上门宣传反诈骗，有我人都在离家击败公里的广州，但是家里打电话来说村里要排查是否已经打了疫苗。</p><p>有时会觉得，这个世界怎么变成这鬼样子，漂亮国好像没那么漂亮了，房价为什么这么变态，男女对立怎么这么严重，大伙都躺平了，能自由说的话越来越少，举报成风，民粹抬头......</p><p>世界变化不重要，重要的是自己要有得选，百度搜索太垃圾所以我用谷歌，但是你需要有科学上网的能力。更强的能力让人有更多的选择，我想学好英语的原因也是一样的。我不后悔今年没上班，回顾前四年职业生涯没有什么可以写的感觉实在可怕，浑浑噩噩一晃而过，想明白自己需要什么能力要什么生活更重要。</p><p>明年想做的事情不多，但都很重要：</p><ul><li>找一份稳定的工作</li><li>学好英语</li><li>找个时间把驾照考了</li></ul><p>2022共勉。</p><p>2021&#x2F;12&#x2F;13初稿。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直以来我都懒得写年终总结，因为之前在公司上班的时候大多时候过得浑浑噩噩，一年下来都想不到有什么好说的事情，今年有充分的时间做自己想做的事情，思考更多的问题，所以有一些东西可以写下来，内容不局限于2021年，会包括2020的下半年，不以线性时间而是按照分类来写。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="生活" scheme="https://zguishen.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="其他" scheme="https://zguishen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="年终总结" scheme="https://zguishen.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>痤疮治疗经历</title>
    <link href="https://zguishen.com/posts/227062ab.html"/>
    <id>https://zguishen.com/posts/227062ab.html</id>
    <published>2021-12-06T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>从中学时期开始，鼻子上和脸颊经常长囊肿类型的痤疮，高中的时候最严重。大学毕业后长得比较少了，但是偶尔还是会长一两个，鼻子一直红红的疤痕不会消退，而且很油，脸和头发都很油，鼻子上的毛孔很大，脸颊也差不多。</p><p>治疗做过许多弯路，吃过很多种药，用过许多护肤品都没有效果。后来才知道异维A酸胶囊这种东西，既便宜治疗囊肿痤疮效果明显，真是相见恨晚，早点知道这药也不至于脸烂了。异维A酸胶囊缺点是副作用巨多，但是有什么关系，总比脸烂了强。经过长期的抗痘经历，总结出几条最有用的方法：</p><ul><li>早睡。早睡真的很重要，这大伙都知道，但大多都没办不到；</li><li>所有中药都没用，唯一指定神药异维A酸胶囊，配合外用治疗痤疮的药膏阿达帕林凝胶（晚上用）和克林霉素磷酸脂凝胶（白天用）；</li><li>注意卫生。枕头套和被单勤洗，洗脸不要用毛巾擦，最好是用洗脸巾，那种一次性的。洗面奶用氨基酸的，便宜的旁氏米粹就行；</li><li>饮食。辛辣的不吃，牛奶也不要喝，戒掉所用糖，比如说快乐水和奶茶，胖子的话干脆把零食全戒了趁机减肥；</li><li>防晒保湿。帽子遮阳伞防晒霜能用就用上，没什么娘不娘的，反正脸是自己的。保湿普通面霜就行了，吃异维A酸胶囊嘴唇大概率会干裂，用唇膏解决。</li></ul><p>今年有时间关注自己身体的情况，决定去医院皮肤科看看，做一次点阵激光。</p><p>去的医院是中山三院，医生是皮肤科的谢小元（痤疮专家）。三甲医院人很多，服务真是一言难尽，乱七八糟的，胜在放心而已。</p><p>当时只做了鼻子部分的点阵激光，包括皮肤微生物的检查、点阵激光手术和药品，总共加起来花费是1700多。</p><p>激光后一个多月红肿情况已经消失，激光治疗效果没有想象中那么好，没用想象中那么明显的差别，可能是需要多次治疗才有明显效果吧，看到有人分享经验激光做了五六次。</p><p>医美真是很耗钱耗时间耗心情的治疗，恐怕只有有钱有时间的人才能坚持去做。</p><p>鉴于自己本身脸不是严重到无法见人的程度，不打算继续做医美治疗了。实际上，注意自己皮肤保养，养成良好的作息习惯，这是治疗恢复皮肤健康的重要要求。</p><p>在经历了戒糖戒牛奶，不吃辛辣油腻的食物几个月后，脸比以前有明显好转，当然，到现在已经是冬天有可能有关系。异维A酸胶囊有很大效果，副作用也是大，嘴唇干裂严重，脸部皮肤干燥，但是鼻子还是出油并且用了克林霉素会脱皮，又油又脱皮真是离谱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从中学时期开始，鼻子上和脸颊经常长囊肿类型的痤疮，高中的时候最严重。大学毕业后长得比较少了，但是偶尔还是会长一两个，鼻子一直红红的疤痕不会消退，而且很油，脸和头发都很油，鼻子上的毛孔很大，脸颊也差不多。&lt;/p&gt;
&lt;p&gt;治疗做过许多弯路，吃过很多种药，用过许多护肤品都没有效果</summary>
      
    
    
    
    <category term="生活" scheme="https://zguishen.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="治疗" scheme="https://zguishen.com/tags/%E6%B2%BB%E7%96%97/"/>
    
    <category term="健康" scheme="https://zguishen.com/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机环境配置备忘</title>
    <link href="https://zguishen.com/posts/4a7d1662.html"/>
    <id>https://zguishen.com/posts/4a7d1662.html</id>
    <published>2021-11-15T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Oracle VM VirtualBox</li><li>ubuntu-20.04.2-live-server-amd64.iso</li></ul><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>CPU 核心根据物理机核心数拉满，待会需要装软件能更快些</p><p>存储不用分区了，感觉虚拟机分区没啥意义，需要扩容的时候反而麻烦。</p><p>软件源换成国内比较快的源，比如阿里（<a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> ）或者清华（<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> ）的。</p><p>安装的时候把 ssh 工具安装选择勾上。</p><p>安装完毕会更新一些东西，不需要就可以 reboot 了，自用虚拟机也懒得安全更新了。</p><p>reboot 正常重启的话到 VirtualBox 里重启。因为是服务器版本，有 cloud-init 云环境这东西，重启后关了，用不着。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> cloud-init-local cloud-init cloud-config cloud-final</span><br><span class="line">systemctl stop cloud-init-local cloud-init cloud-config cloud-final</span><br></pre></td></tr></table></figure><h2 id="设置和软件安装"><a href="#设置和软件安装" class="headerlink" title="设置和软件安装"></a>设置和软件安装</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>网络问题以前写过 <a href="https://blog.csdn.net/u012809062/article/details/118102545">VirtualBox Ubuntu20.04 网络设置</a>，懒得搬过来了。</p><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>如何之前没选择安装 ssh 工具，手动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>客户机上 <code>ssh-keygen -t rsa</code> 生成密钥</p><p>Linux 上密钥位置在当前用户目录下  <code>.ssh</code> 文件夹中，Windows 上密钥位置在 <code>C:\Users\用户名\.ssh</code> 中，公钥文件为 id_rsa.pub，私钥文件为 id_rsa</p><p>将公钥文件上传到当前用户目录下 <code>/home/用户/.ssh/</code> （或者想给谁 ssh 权限放谁目录下，目录不存在先创建）</p><p>创建 authorized_keys 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将公钥写入 authorized_keys 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys`</span><br></pre></td></tr></table></figure><p>注意服务器机器若也想 ssh 其他机器，.ssh 目录下要是先生成 id_rsa.pub 文件，上传的客户端公钥文件改个名，别把服务器机器自己的公钥给覆盖了。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>原软件源中的 Docker 可能不是最新版本的</p><p>更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><p>使用下面的 <code>curl</code> 导入源仓库的 GPG key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>将 Docker APT 软件源添加到你的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>现在，Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本。</p><p>安装 Docker 最新版本，运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>非 root 用户执行 docker 命令权限不足，不想 sudo 就把用户加到 docker 用户组，重开终端即生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker &#123;用户名&#125;</span><br></pre></td></tr></table></figure><p>想在 IDEA 或其他工具连接管理容器可以开启远程模式。</p><p>编辑 docker 服务，加上远程监听服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>reload 下守护线程，重启 docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>根据你的 ip 访问 http:&#x2F;&#x2F;{ip}:2375&#x2F;version，可以看到版本信息就行了。另外在 IDEA 连接 Docker 的时候需要把代理（HTTP Proxy 那地方）关了，否则连接可以会报异常<code>java.io.IOException: unexpected end of stream</code>。</p><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>github raw 被墙，不想脚本安装就先装 zsh，再克隆git库配置一下就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>vi ~&#x2F;.zshrc   修改主题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;ys&quot;</span></span><br></pre></td></tr></table></figure><p><code>echo $SHELL</code>  查看默认 shell</p><p><code>chsh -s /bin/zsh</code>   设置 zsh 为默认 shell</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>...</p><p>一些常用的命令配置可以写成脚本一键执行更简单。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Oracle VM VirtualBox&lt;/li&gt;
&lt;li&gt;ubuntu-20.04.2-live-server-amd64.i</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Linux" scheme="https://zguishen.com/tags/Linux/"/>
    
    <category term="Docker" scheme="https://zguishen.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>内存自由</title>
    <link href="https://zguishen.com/posts/77b48781.html"/>
    <id>https://zguishen.com/posts/77b48781.html</id>
    <published>2021-11-15T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>自用笔记本日常使用开几十上百个 chrome 标签页，多个 IDEA 工程，虚拟机测试环境，加上几个 Electron 应用，16G 内存很容易就被占满，有时已经不支持 IDEA 开多个工程了。经常是要关闭一些应用以此释放内存才能够打开其他应用，没法做到应用常驻，需要的时候可以无缝切换。</p><p>双11的时候把原来的2x8G内存换成了2x16G，初步实现了内存自由，终于不用再抠抠搜搜了担心内存不够用了，可以把集中精神干活了。当前时间点内存也不算贵了，对于开发也不需要超频那么强的内存条，一天16G DDR4笔记本内存条三百出头，不差钱的建议把内存槽满上。</p><p>对于开发者来说，赚钱的工具很重要，所以在能力范围内没必要在设备上太省钱，硬件太拉跨就花钱升级。同理外围设备比如显示器和座椅也是一样了，好的设备能让你有更好的体验，而且对眼睛和脊椎都好。曾经短暂在一家做音视频开发公司工作过，提供的开发机器只有8G，没法更好配的电脑，由于安全规定用自己的也不行，开发刚好又是大工程，用得那叫一个难受，真不知道其他同事是怎么忍的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自用笔记本日常使用开几十上百个 chrome 标签页，多个 IDEA 工程，虚拟机测试环境，加上几个 Electron 应用，16G 内存很容易就被占满，有时已经不支持 IDEA 开多个工程了。经常是要关闭一些应用以此释放内存才能够打开其他应用，没法做到应用常驻，需要的时候</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="唠叨" scheme="https://zguishen.com/tags/%E5%94%A0%E5%8F%A8/"/>
    
  </entry>
  
  <entry>
    <title>松下 DMC-LX10 卡片机</title>
    <link href="https://zguishen.com/posts/b4cd3869.html"/>
    <id>https://zguishen.com/posts/b4cd3869.html</id>
    <published>2021-11-12T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前就想拥有一台相机，但当有钱之后一段时间内都没考虑去买。普通相机并不便宜，即便便宜的相机在一般场景使用并没有比手机好多少，在一加7摄像头刮花之后才有欲望入手一台便携相机，出门能装装样子，拍几张照。结果后面发现手机那只是外面的套刮花了，能淘宝换壳解决，不过也不后悔买了相机。</p><p>因为并不是真的想深入玩摄影，单反相机一般又大又贵，买一台便宜卡片机就成为我的选择。在两三千价位很多人都推荐索尼的黑卡 <a href="https://u.jd.com/2d1z0yM">RX100 M3</a> 或松下的 <a href="https://u.jd.com/2M1wJey">DMC-LX10</a> 卡片机，没有大法信仰的我买了 LX10。本来想买二手的，但是海鲜市场的 LX10 涨价太多了，都赶上京东优惠后两千多的价格了，所以干脆在京东买了。吐槽下现在的购物节，套路实在太多了，又是搞一堆优惠券又是搞先付定金拖着付尾款，花钱买东西还费心费力的。</p><p>LX10 相机系统做得还不错，很好上手，不过现在的卡片机真的没比高端手机强多少了，当然比我手上的一加7还是好太多了，前几天去了一趟海珠湖，时隔5年再次拍了广州塔。当时有个场景比较可惜的，刚好有飞机飞过，而且很清晰，可是我还没找好位置没拍下来。</p><p>2017年4月3日<br><img src="/../images/20210403/IMG_20170403_141512.jpg" alt="20170403"></p><p>2021年11月10日<br><img src="/../images/202111/P1000366.jpg" alt="20211110"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很久之前就想拥有一台相机，但当有钱之后一段时间内都没考虑去买。普通相机并不便宜，即便便宜的相机在一般场景使用并没有比手机好多少，在一加7摄像头刮花之后才有欲望入手一台便携相机，出门能装装样子，拍几张照。结果后面发现手机那只是外面的套刮花了，能淘宝换壳解决，不过也不后悔买了相</summary>
      
    
    
    
    <category term="生活" scheme="https://zguishen.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="其他" scheme="https://zguishen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="摄影" scheme="https://zguishen.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Why Java&#39;s Records Are Better Than Lombok&#39;s @Data and Kotlin&#39;s Data Classes</title>
    <link href="https://zguishen.com/posts/51a1cc5e.html"/>
    <id>https://zguishen.com/posts/51a1cc5e.html</id>
    <published>2021-09-24T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://nipafx.dev/java-record-semantics/">https://nipafx.dev/java-record-semantics/</a></p><p>While all three remove boilerplate, the similarities don&#39;t go much further. Records have stronger semantics with important downstream benefits, which makes them better. (not always; depends on circumstances; excuse the clickbait)</p><p><img src="/../images/202109/record-semantics.webp"></p><p>I&#39;m sure by now you&#39;ve all seen the examples of how records turn a full-blown POJO ...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> low;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Range</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.low = low;</span><br><span class="line"><span class="built_in">this</span>.high = high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLow</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHigh</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == o)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">Range</span> <span class="variable">range</span> <span class="operator">=</span> (Range) o;</span><br><span class="line"><span class="type">return</span> <span class="variable">low</span> <span class="operator">=</span>= range.low &amp;&amp;</span><br><span class="line">high == range.high;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Objects.hash(low, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + low + <span class="string">&quot;; &quot;</span> + high + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...into a single line of code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//          these are &quot;components&quot;</span></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">Range</span> (<span class="type">int</span> low, <span class="type">int</span> hight) &#123; &#125;</span><br></pre></td></tr></table></figure><p>Of course Lombok&#39;s @Data or @Value (depending on your needs) could do that for years with a few more lines:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> low;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And if you&#39;re familiar with Kotlin, you know how data classes do the same:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data <span class="keyword">class</span> <span class="title class_">Range</span>(val low: Int, val high: Int)</span><br></pre></td></tr></table></figure><p>So these are essentially the same features right? No. No, they&#39;re really not. Because for records, boilerplate reduction is not the purpose, it&#39;s just a (welcome) consequence of their semantics.</p><p><em>[These are really not the same features]</em></p><p>Unfortunately, this gets easily lost. The boilerplate reduction is obvious and sexy and easy to demonstrate, so it gets a lot of exposure. But the semantics and their benefits don&#39;t. It doesn&#39;t help that <a href="https://docs.oracle.com/en/java/javase/16/language/records.html">the official documentation</a> also takes the boilerplate angle and while <a href="https://openjdk.java.net/jeps/395">JEP 395</a> better explains the semantics, due to its scope it&#39;s naturally vague when it comes to describing the downstream benefits. So I thought I&#39;d write them down here.</p><p>First semantics, then benefits.</p><h2 id="Record-Semantics"><a href="#Record-Semantics" class="headerlink" title="Record Semantics"></a>Record Semantics</h2><p>JEP 395 says:</p><p><em>[Records are transparent carriers for immutable data]</em></p><blockquote><p>[Records] are classes that act as transparent carriers for immutable data.</p></blockquote><p>So by creating a record you&#39;re telling the compiler, your colleagues, the whole wide world that this type is about data. More precisely, data that&#39;s (shallowly) immutable and transparently accessible. That&#39;s the core semantic - everything else follows from here.</p><p>If this semantic doesn&#39;t apply to the type you want to create, then you shouldn&#39;t create a record. If you do it anyways (maybe lured in by the promise of no boilerplate or because you think records are equivalent to <code>@Data</code>&#x2F;<code>@Value</code> or data classes), you&#39;re muddying your design and chances are good that it will come back to bite you. So don&#39;t.</p><p>(Sorry for the harsh words, but it needed to be said.)</p><h3 id="Transparency-amp-Restrictions"><a href="#Transparency-amp-Restrictions" class="headerlink" title="Transparency &amp; Restrictions"></a>Transparency &amp; Restrictions</h3><p>Let&#39;s have a closer look at transparency. Records even have a motto for that - paraphrasing <a href="https://cr.openjdk.java.net/~briangoetz/amber/datum.html">a Project Amber design document:</a></p><blockquote><p>The API for a record models the state, the whole state, and nothing but the state.</p></blockquote><p>To live up to that, some restrictions are needed:</p><ul><li>an accessor for each component with the same name and return type that returns exactly the component&#39;s value (or the API doesn&#39;t model the state)</li><li>an accessible constructor whose parameter list matches the components (called canonical constructor; or the API doesn&#39;t model the state)</li><li>no additional fields (or the API doesn&#39;t model the whole state)</li><li>no class inheritance (or the API doesn&#39;t model the whole state because more can be hiding elsewhere)</li></ul><p>Why, though? Lombok allows additional fields and Kotlin&#39;s data classes, too, as well as private &quot;components&quot; (that&#39;s the record term; Kotlin calls them primary constructor parameters). So why is Java so strict about this? To answer that, we need some math.</p><h3 id="Math-sorry"><a href="#Math-sorry" class="headerlink" title="Math (sorry)"></a>Math (sorry)</h3><p>A set is a bunch of elements, e.g. we can say C is the set of all colors { blue, gold, ... } and N the set of all natural numbers { 0, 1, ...}. The finite set { -2147483648, ..., 0, ..., 2147483647} is what we in Java typically call int and if we throw in null we get Integer. Similarly, the infinite set of all possible strings (plus null 🙄) is what we call String.</p><p>So, as you can see, types are sets where the set&#39;s values are exactly the values that are legal for that type. That also means that set theory, &quot;the branch of mathematical logic that studies sets&quot; (says Wikipedia), is related to type theory, &quot;the academic study of type systems&quot; (likewise), which language design relies on.</p><p><em>[Types are sets]</em></p><p>Now let&#39;s do something fancy and build pairs of integers (yes, that fancy): { (0, 0), (0, 1), ... }. This is what a simple and terribly incomplete Java class for that would look like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> first;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> second;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could call the corresponding set Pair and that would work. But there&#39;s a bit more insight to be had because we know more about the set&#39;s structure. Specifically, we know that it&#39;s the combination of all ints with all ints. Set theory calls that a product and it&#39;s written as int × int (each type in a product is called an operand).</p><p>That&#39;s pretty cool because set theory has all kinds of things to say about applying functions to these products. One aspect of that is how functions that operate on a single operand can be combined to functions that operate on all operands and which properties of the functions (<a href="https://en.wikipedia.org/wiki/Injective_function">injective</a>, <a href="https://en.wikipedia.org/wiki/Bijection">bijective</a>, etc.) remain intact.</p><p>For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// given: bijective function from int to int</span></span><br><span class="line"><span class="type">IntUnaryOperator</span> <span class="variable">increment</span> <span class="operator">=</span></span><br><span class="line">i -&gt; i == Integer.MAX_VALUE ? Integer.MIN_VALUE : ++i;</span><br><span class="line"><span class="comment">// then: combining two `increment`s yields a bijective function</span></span><br><span class="line"><span class="comment">//       (this requires no additional proof or consideration)</span></span><br><span class="line">UnaryOperator&lt;Pair&gt; incrementPair =</span><br><span class="line">pair -&gt; <span class="keyword">new</span> <span class="title class_">Pair</span>(</span><br><span class="line">increment.applyAsInt(pair.first()),</span><br><span class="line">increment.applyAsInt(pair.second()));</span><br></pre></td></tr></table></figure><p>Did you note the accessors Pair::first and Pair::second? They didn&#39;t exist in the class above, so I need to add them. Otherwise I couldn&#39;t apply functions to individual components&#x2F;operands and so I couldn&#39;t really use Pair as a pair of ints. Similarly, but in the other direction, I needed a constructor that takes both ints as arguments so I can reconstitute a pair.</p><p>More generally, to apply set theory to a type in the way I alluded to above, all its operands need to be accessible and there must be a way to turn a tuple of operands into an instance. If both is true, type theory calls such a type a product type (and their instances tuples) and there are a few cool things we can do with them.</p><p>Actually, records are even better* than tuples. JEP 395 says:</p><blockquote><p>Records can be thought of as nominal tuples.</p></blockquote><p>Where nominal means that records are identified by their name and not their structure. That way you can&#39;t mix up two different record types that both model int × int, for example Pair(int first, int second) and Range(int low, int high). Also, we access the record components not by index (not range.get1()) but by name (record.low()).</p><p>(Beyond that, a record&#39;s accessors and its canonical constructor form an embedding-projection pair, but I hardly understand that. Definitely too little to explain.)</p><h3 id="Consequences"><a href="#Consequences" class="headerlink" title="Consequences"></a>Consequences</h3><p>I want to drive the point home: Records want to be product types (because of the cool things) and for that to work, all their components must be accessible, i.e. there can be no hidden state, and construction from them must be possible. That&#39;s why records are transparent carriers of immutable data.</p><p><em>[Records are product types; that&#39;s why they&#39;re transparent]</em></p><p>Hence the compiler generates accessors.</p><p>Hence we can&#39;t change their names or return type.</p><p>Hence we should be very careful with overriding them.</p><p>Hence the compiler generates a canonical constructor.</p><p>Hence there can be no inheritance.</p><h2 id="Why-Records-Are-Better"><a href="#Why-Records-Are-Better" class="headerlink" title="Why Records Are Better*"></a>Why Records Are Better*</h2><p>Most benefits we get from the algebraic structure revolve around the fact that the accessors together with the canonical constructor allow to take apart and recreate record instances in a structured manner without loss of information.</p><h3 id="Destructuring-Patterns"><a href="#Destructuring-Patterns" class="headerlink" title="Destructuring Patterns"></a>Destructuring Patterns</h3><p>JEP 405 proposes record and array patterns, which will enhance Java&#39;s pattern matching capabilities. They will allow us to take records and arrays apart and apply further checks to their components:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (range <span class="keyword">instanceof</span> <span class="title function_">Range</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> &amp;&amp; high &lt; low)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Range</span>(high, low);</span><br></pre></td></tr></table></figure><p>Thanks to full transparency, we can be sure not to miss hidden state. That means that the difference between range and the returned instance is exactly what you see: low and high are flipped - nothing more.</p><h3 id="with-blocks"><a href="#with-blocks" class="headerlink" title="with blocks"></a>with blocks</h3><p>A future version of Java may introduce with blocks that make it very easy to create copies of (usually immutable) instances with some values changed. It could look something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Range</span> <span class="variable">range</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Range</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// SYNTAX IS MADE UP!</span></span><br><span class="line"><span class="type">Range</span> <span class="variable">newRange</span> <span class="operator">=</span> range with &#123; low = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// range: [5; 10]</span></span><br><span class="line"><span class="comment">// newRange: [0; 10]</span></span><br></pre></td></tr></table></figure><p>The language can derive with expressions precisely because Ranges API is aligned with its declaration. And similar to before, we can rely on newRange being exactly like range except for low - there can be no hidden state that we failed to transport. And the language really doesn&#39;t have to do much here:</p><ul><li>declare variables for components (e.g. low, high) and assign values via accessors</li><li>execute the with block</li><li>pass the variables to the canonical constructor</li></ul><p>(Note that this feature is far from being a reality and might get dropped or change considerably.)</p><h3 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h3><p>To turn an instance into a byte stream, a JSON or XML document, or any other external representation and back again requires a way to take an instance apart into its values and then take those values and put them back together. You can immediately see how this works really well with records. Not only do they expose all their state and offer a canonical constructor, they do so in a structured way that makes the reflection API for that very straightforward to use.</p><p>For a lot more about how records changed serialization, check out <a href="https://inside.java/2021/03/08/podcast-014/">the Inside Java Podcast, episode 14</a> (also on many audio platforms, e.g. on <a href="https://open.spotify.com/episode/6lmaaDwvV7NaJ3YFrid3ww">Spotify</a>). If you prefer a short read, I wrote <a href="https://twitter.com/nipafx/status/1371093883631833092">a Twitter thread</a> about it.</p><h3 id="Also-The-Boilerplate"><a href="#Also-The-Boilerplate" class="headerlink" title="Also, The Boilerplate"></a>Also, The Boilerplate</h3><p>Going back to the boilerplate for a second. As explained earlier, we need the following code so a record can be a product type:</p><ul><li>canonical constructor</li><li>accessors</li><li>no inheritance</li></ul><p>I didn&#39;t explicitly state that, but it&#39;s kinda nice if (0, 0) &#x3D; (0, 0), so a proper equals implementation is welcome as well, which immediately requires a hashCode implementation.</p><p>Since we need all that, the compiler might as well generate it. So it does (and throws in toString for good measure) - not so much to save us from writing it but because it&#39;s a natural consequence of the algebraic structure.</p><h2 id="Why-Records-Are-Worse"><a href="#Why-Records-Are-Worse" class="headerlink" title="Why Records Are Worse*"></a>Why Records Are Worse*</h2><p>Records&#39; semantics restrict which class-building tools you can use. As discussed, you can&#39;t add hidden state via additional fields, can&#39;t rename accessors, can&#39;t change their return type, and probably shouldn&#39;t change their return value. Records also don&#39;t allow reassigning component values, i.e. their backing fields are <strong>final</strong>, and no class inheritance (you can implement interfaces, though).</p><p>So what if you need that? Then records aren&#39;t what you&#39;re looking for and you need to create a regular class instead. Even if that means that just to change 10% of the functionality, you&#39;ll end up with 90% of the boilerplate that a record would&#39;ve prevented.</p><h3 id="Why-Lombok-39-s-Data-x2F-Value-Is-Better"><a href="#Why-Lombok-39-s-Data-x2F-Value-Is-Better" class="headerlink" title="Why Lombok&#39;s @Data&#x2F;@Value Is Better*"></a>Why Lombok&#39;s @Data&#x2F;@Value Is Better*</h3><p>Lombok just generates code. There&#39;s no semantic attached, so you have all the freedom you need to adapt the class to your requirements. Of course you don&#39;t get the benefits that come from stronger guarantees either, although Lombok may be able to generate destructuring methods in the future.</p><p><em>[Lombok attaches no semantics]</em></p><p>(That said, I don&#39;t advertise using Lombok. It heavily relies on APIs internal to the compiler, which can change at any time and which means projects using it can break on any minor Java update. That it goes to great lengths to hide that technical debt from its users isn&#39;t great either.)</p><h3 id="Why-Kotlin-39-s-Data-Classes-Are-Better"><a href="#Why-Kotlin-39-s-Data-Classes-Are-Better" class="headerlink" title="Why Kotlin&#39;s Data Classes Are Better*"></a>Why Kotlin&#39;s Data Classes Are Better*</h3><p>Here&#39;s what the docs say about data classes:</p><blockquote><p>You often create classes whose main purpose is to hold data. In such classes, some standard functionality and utility functions are often mechanically derivable from the data.</p></blockquote><p>You can see that the semantic of holding data is there as well, but it&#39;s pretty weak and the focus is on deriving functionality, i.e. generating code. Indeed, data classes offer more class building tools than records (mutable &quot;components&quot;, hidden state, ...), but unlike with Lombok, you can&#39;t use all of them (can&#39;t be extended, can&#39;t create your own copy method, ...). On the other hand, data classes don&#39;t give records&#39; strong guarantees, so Kotlin can&#39;t quite build the same features on top of them.</p><p><em>[Data classes have weak semantics]</em></p><p>Before you get your keyboards out to write angry comments (which you can&#39;t because I didn&#39;t get around to have those yet - har har), this is no value judgement. It&#39;s a different trade-off with different costs and benefits and if Kotlin&#39;s make more sense to you, that&#39;s fine with me. Don&#39;t @ me (as the kids say).</p><p><em>[There&#39;s not much use in declaring JVM records in Kotlin]</em></p><p><strong>Note:</strong><br>Readers have been pointing out Kotlin&#39;s @JvmRecord, some as a big gotcha: &quot;See, data classes can be records, too - check mate&quot; (I&#39;m paraphrasing but only barely). If you had the same thought, I ask you to stop and mull it over for a second. What exactly does that get you?</p><p>The data class has to abide by all record rules, which means it can&#39;t do more than records. But Kotlin still doesn&#39;t understand the concept of transparent tuples and can&#39;t do more with a <strong>@JvmRecord data class</strong> than with a regular data class. So you have records&#39; freedoms and data classes&#39; guarantees - the worst of both worlds.</p><p>Why does @JvmRecord exist, then? Just interoperability. As the proposal says:</p><blockquote><p>There&#39;s not much use in declaring JVM records in Kotlin besides two use cases:</p><ul><li>migrating an existing Java record to Kotlin and preserving its ABI;</li><li>generating a record class attribute with record component info for a Kotlin class to be read later by a potential framework relying on Java reflection to introspect records.</li></ul></blockquote><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><ul><li>👇🏾</li></ul><p>So of course records aren&#39;t generally better or worse than the other two features or others with similar design like Scala&#39;s case classes. But they do have strong semantics with a firm mathematical foundation that, while limiting our class design space, enable powerful features that would otherwise not be possible or at least not as reliable.</p><p>It&#39;s a trade-off between developer freedom and language power. And it&#39;s one I&#39;m happy with and look forward to see unfolding it&#39;s full potential over the next years.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接：&lt;a href=&quot;https://nipafx.dev/java-record-semantics/&quot;&gt;https://nipafx.dev/java-record-semantics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While all three remove boil</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>从 Java8 到 Java11 再到 Java17 的新特性(3)</title>
    <link href="https://zguishen.com/posts/4ed6213.html"/>
    <id>https://zguishen.com/posts/4ed6213.html</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>2021年9月14日甲骨文正式发布 Java 17，这是继 Java11 之后的又一个 LTS 版本，而且 Oracle 开始提供免费使用的许可证，并在下一个 LTS 版本之后继续提供整整一年。所以还是有限制的，一般我们都用 OpenJDK 得了，来看看 Java12 到 17 提供了哪些新的语言特性和 API。</p><p>本文源码地址：<a href="https://github.com/zgshen/code-note/tree/master/src/com/jdk/java12to17">code-note</a></p><h3 id="1-Switch-表达式"><a href="#1-Switch-表达式" class="headerlink" title="1. Switch 表达式"></a>1. Switch 表达式</h3><p>在 Java 12（12、13预览，14正式） 之后，对 Switch 表达式进行了改进，比传统写法更简便，在 Java17 的预览版中，还支持对类型的匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传统做法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchBeforeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        Character c= <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        String res;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                res = <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                res = <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                res = <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                res = <span class="string">&quot;未知等级&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;良好&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的 switch 表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchNowTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> -&gt; <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span> -&gt; <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> -&gt; <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">&quot;未知等级&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;良好&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型检查</span></span><br><span class="line"><span class="comment">     * 根据 object 不同的类型和条件做不同的处理</span></span><br><span class="line"><span class="comment">     * 这个是 17 的预览特性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">formatTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">1000000000</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> <span class="keyword">switch</span> (o) &#123;</span><br><span class="line">            <span class="comment">//相当于 if (o instanceof Integer &amp;&amp; (int)o &gt; 10)</span></span><br><span class="line">            <span class="keyword">case</span> Integer i &amp;&amp; i &gt; <span class="number">10</span> -&gt; String.format(<span class="string">&quot;a large Integer %d&quot;</span>, i);</span><br><span class="line">            <span class="keyword">case</span> Integer i -&gt; String.format(<span class="string">&quot;a small Integer %d&quot;</span>, i);</span><br><span class="line">            <span class="keyword">case</span> Long l    -&gt; String.format(<span class="string">&quot;a Long %d&quot;</span>, l);</span><br><span class="line">            <span class="keyword">default</span>        -&gt; o.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(formatted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Record-值类型"><a href="#2-Record-值类型" class="headerlink" title="2. Record 值类型"></a>2. Record 值类型</h3><p>从 Java14（14、15预览，16正式）之后，可以使用 record 定义不可变数据类，用于在类和应用程序之间的数据传输（DTO 类），通过构造函数创建对象，JVM 会自动生成 getter 方法供使用，有点类似于 Lombok 的作用。区别是 Lombok 只是生成代码，而 record 类型的类附加了不可变且透明的语义，这既是优点也是缺点。Record 类不能存在任何隐藏状态，适用于作为标准化的类使用，不适合作为一个普通的 java bean 使用，更不用说代替 Lombok（可以看参考中<a href="https://nipafx.dev/java-record-semantics/">关于 Record 与 Lombok 和 Kotlin 的 Data Classes 的比较</a>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordClassExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;nathan&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, user.id());</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;nathan&quot;</span>, user.username());</span><br><span class="line">        Assert.assertEquals(<span class="number">25</span>, user.age());</span><br><span class="line">        <span class="comment">//User[id=1, username=nathan, age=25]</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不可变数据透明载体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">record</span> <span class="title class_">User</span><span class="params">(<span class="type">long</span> id, String username, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">//private int otherInt;</span></span><br><span class="line">    <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">        System.out.println();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//明确声明全部参数的构造器</span></span><br><span class="line">    <span class="comment">/*public User(long id, String username, int age) &#123;</span></span><br><span class="line"><span class="comment">        this.id = id;</span></span><br><span class="line"><span class="comment">        this.username = username;</span></span><br><span class="line"><span class="comment">        this.age = age;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//全参数构造器简化写法</span></span><br><span class="line">    <span class="comment">/*public User &#123;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//其他构造器要明确调用其他已定义构造器，最后调用最底层还是声明全部参数的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">1</span>, <span class="string">&quot;nathan&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-sealed-修饰封闭类"><a href="#3-sealed-修饰封闭类" class="headerlink" title="3. sealed 修饰封闭类"></a>3. sealed 修饰封闭类</h3><p>在一般情况，如果一个类没有被 final 关键字修饰，那么其他类就可以继承该类。从 Java15（15、16预览，17正式） 开始，可以使用 sealed 修饰一个类或接口，并通过 permits 指定哪几个类可以从该类继承，继承的子类必须使用 final 或者 non-sealed 修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口也可以 sealed interface Animal permits Cat, Dog &#123;</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Animal</span> permits Cat, Dog &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;have a meal.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要明确用 final 修饰</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想被继承的话用 non-sealed 修饰</span></span><br><span class="line"><span class="keyword">non-sealed</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Husky</span> <span class="keyword">extends</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stupid humans!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-instanceof-模式匹配"><a href="#4-instanceof-模式匹配" class="headerlink" title="4. instanceof 模式匹配"></a>4. instanceof 模式匹配</h3><p>Java 14（14、15预览，16正式） 中，对 instanceof 模式匹配做了改进，允许程序中的逻辑判断从对象中有条件地提取组件，以编写更简洁和安全的表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceofExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceofTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;string value&quot;</span>;</span><br><span class="line">        <span class="comment">//传统写法</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">            Assert.assertEquals(str, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新写法</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">            Assert.assertEquals(s, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//还可以做其他操作</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s &amp;&amp; s.contains(<span class="string">&quot;val&quot;</span>)) &#123;</span><br><span class="line">            Assert.assertEquals(s, obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-文本块"><a href="#5-文本块" class="headerlink" title="5. 文本块"></a>5. 文本块</h3><p>Java 13（13、14预览，15正式） 引入了文本块来解决多行文本的问题，文本块主要以三重双引号开头，并以同样的以三重双引号结尾终止，Java 14 在 Java 13 引入的文本块的基础之上，新加入了两个转义符 <code>\</code> 和 <code>\s</code>，分别用于阻止插入换行符和避免末尾空白字符被去掉。文本块增强了使用 String 来表达 HTML、XML、SQL 或 JSON 等格式字符串的编码可读性，且易于维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextBlocksExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">strTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                Hello World!</span></span><br><span class="line"><span class="string">                Java 17 is now available!</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blankTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * \  行终止符，用于阻止插入换行符</span></span><br><span class="line"><span class="comment">         * \s 表示一个空格，用来避免末尾的空白字符被去掉</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                Hello World!\</span></span><br><span class="line"><span class="string">                Java 17 is now available!    \s</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jsonStrTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//有引号也不需要转义</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    id: 1,</span></span><br><span class="line"><span class="string">                    username: &quot;nathan&quot;,</span></span><br><span class="line"><span class="string">                    age: 25</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">htmlStrTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &lt;html&gt;</span></span><br><span class="line"><span class="string">                    &lt;body&gt;</span></span><br><span class="line"><span class="string">                       &lt;p&gt;Java 17 is now available!&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;/body&gt;</span></span><br><span class="line"><span class="string">                &lt;/html&gt;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-stream"><a href="#6-stream" class="headerlink" title="6. stream"></a>6. stream</h3><p>Java 16 引入 Stream.toList() 为更方便的添加集合方法（取代以前的 .collect(Collectors.toList()) ）, 还有 Stream.mapMulti 方法，允许用多个元素替换流中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">streamTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//.toList() 代替 .collect(Collectors.toList())</span></span><br><span class="line">    Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">            .filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//.count(Collectors.toList())</span></span><br><span class="line">            .toList()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mapMulti 用多个元素替换流中的元素，原来 flatMap 也能实现</span></span><br><span class="line">    Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">            <span class="comment">//.flatMap(num -&gt; Stream.of(num + num, num * num, &quot; &quot;))</span></span><br><span class="line">            .mapMulti((num, downstream) -&gt; &#123;</span><br><span class="line">                downstream.accept(num + num);</span><br><span class="line">                downstream.accept(num * num);</span><br><span class="line">                downstream.accept(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .forEach(System.out::print);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><ul><li>[1] <a href="https://advancedweb.hu/a-categorized-list-of-all-java-and-jvm-features-since-jdk-8-to-17/">A categorized list of all Java and JVM features since JDK 8 to 17</a></li><li>[2] <a href="https://pdai.tech/md/java/java8up/java11.html">Java 全栈知识体系</a></li><li>[3] <a href="https://www.oracle.com/cn/news/announcement/oracle-releases-java-17-2021-09-14/">甲骨文正式发布Java 17</a></li><li>[4] <a href="https://nipafx.dev/java-record-semantics/">Why Java&#39;s Records Are Better* Than Lombok&#39;s @Data and Kotlin&#39;s Data Classes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021年9月14日甲骨文正式发布 Java 17，这是继 Java11 之后的又一个 LTS 版本，而且 Oracle 开始提供免费使用的许可证，并在下一个 LTS 版本之后继续提供整整一年。所以还是有限制的，一般我们都用 OpenJDK 得了，来看看 Java12 到 </summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
    <category term="NewFeatures" scheme="https://zguishen.com/tags/NewFeatures/"/>
    
  </entry>
  
  <entry>
    <title>从 Java8 到 Java11 再到 Java17 的新特性(2)</title>
    <link href="https://zguishen.com/posts/1df65352.html"/>
    <id>https://zguishen.com/posts/1df65352.html</id>
    <published>2021-09-21T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>2018年9月26日，Oracle 官方宣布 Java 11 正式发布，这是自 Java8 之后 Java 大版本周期变化后的第一个长期支持版本。这篇介绍的是 Java9 到 Java11 累积的一些新特性，只涉及语法和编码上的功能，其他的如工具和虚拟机改进不涉及。</p><p>本文源码地址：<a href="https://github.com/zgshen/code-note/tree/master/src/com/jdk/java9to11">code-note</a></p><h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h3><p>接口允许有私有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Enhance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        staticMethod();<span class="comment">// or Enhance.staticMethod();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static method in interface.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-try-语句"><a href="#2-try-语句" class="headerlink" title="2. try 语句"></a>2. try 语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/home/nathan/test.sh&quot;</span>;</span><br><span class="line">    <span class="comment">//Java7 引入的 try-with-resource 机制</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Java9 可以在 try 中使用已初始化的资源</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">    <span class="type">var</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);</span><br><span class="line">    <span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">        <span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-I-x2F-O-流新特性"><a href="#3-I-x2F-O-流新特性" class="headerlink" title="3. I&#x2F;O 流新特性"></a>3. I&#x2F;O 流新特性</h3><p>类 <code>java.io.InputStream</code> 中增加了新的方法来读取和复制 InputStream 中包含的数据。 </p><ul><li>readAllBytes：读取 InputStream 中的所有剩余字节。 </li><li>readNBytes： 从 InputStream 中读取指定数量的字节到数组中。 </li><li>transferTo：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> EnhanceExample.class.getResourceAsStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">    inputStream.readNBytes(arr, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Java9&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(arr));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] allBytes = inputStream.readAllBytes();</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Java10Java11&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(allBytes));</span><br><span class="line"></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream1</span> <span class="operator">=</span> EnhanceExample.class.getResourceAsStream(<span class="string">&quot;test.txt&quot;</span>);;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    inputStream1.transferTo(outputStream);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Java9Java10Java11&quot;</span>, outputStream.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-集合、Stream-和-Optional"><a href="#4-集合、Stream-和-Optional" class="headerlink" title="4. 集合、Stream 和 Optional"></a>4. 集合、Stream 和 Optional</h3><p>在集合框架中，Java 9 增加 了 List.of()、Set.of()、Map.of() 和 Map.ofEntries() 等工厂方法来创建不可变集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unmodifiableCollectionTest</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; integers = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    Set&lt;String&gt; strings = Set.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    Map&lt;String, Integer&gt; stringIntegerMap = Map.of(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="string">&quot;b&quot;</span>, <span class="number">2</span>, <span class="string">&quot;c&quot;</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream 中增加了新的方法 ofNullable、dropWhile、takeWhile 和 iterate；Collectors 中增加了新的方法 filtering 和 flatMapping。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">streamTest</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">//输出1，2，4，碰到5不成立停止</span></span><br><span class="line">    list.stream().takeWhile(x -&gt; x &lt; <span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//丢弃1，2，碰到3不成立停止</span></span><br><span class="line">    List&lt;Integer&gt; collect = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).dropWhile(i -&gt; i%<span class="number">3</span>!=<span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//允许值为空</span></span><br><span class="line">    Stream&lt;Object&gt; stream = Stream.ofNullable(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional 转 stream</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(</span><br><span class="line">            Optional.of(<span class="number">1</span>),</span><br><span class="line">            Optional.empty(),</span><br><span class="line">            Optional.of(<span class="number">2</span>)).flatMap(Optional::stream).count();</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空值 throw</span></span><br><span class="line">    Optional.empty().orElseThrow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream 还提供一个 Predicate (判断条件)来指定什么时候结束迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">iterateTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream.iterate(<span class="number">1</span>, i -&gt; ++i).limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//可以直接在 iterate 内部判断</span></span><br><span class="line">    Stream.iterate(<span class="number">1</span>, i -&gt; i &lt;= <span class="number">5</span>, i -&gt; ++i).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-变量类型推断"><a href="#5-变量类型推断" class="headerlink" title="5. 变量类型推断"></a>5. 变量类型推断</h3><p>从 Java10 开始变量不需要写具体类型，变量类型直接使用 var 定义，编译器能根据右边的表达式自动推断类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">var</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">var</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    Assert.assertEquals(str1, str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象引用也可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//相当于 Object 用</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示对象引用，类名很长的情况能简化代码编写</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableTest</span>();</span><br><span class="line">    System.out.println(v.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;interface var&quot;</span>);</span><br><span class="line">    <span class="comment">// 无法表示接口引用，毕竟匿名类方式无法推断是哪个类的实现</span></span><br><span class="line">    <span class="comment">//var r = () -&gt; System.out.println(&quot;interface var&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-HTTP-客户端"><a href="#6-HTTP-客户端" class="headerlink" title="6. HTTP 客户端"></a>6. HTTP 客户端</h3><p>Java 11 对 Java 9 中引入并在 Java 10 中进行了更新的 Http Client API 进行了标准化，Java 11 中的新 Http Client API，提供了对 HTTP&#x2F;2 等业界前沿标准的支持，同时也向下兼容 HTTP&#x2F;1.1，精简而又友好的 API 接口，与主流开源 API（如：Apache HttpClient、Jetty、OkHttp 等）类似甚至拥有更高的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpClient;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    HttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        client = HttpClient.newBuilder().connectTimeout(Duration.ofMillis(<span class="number">20000L</span>)).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reqTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder(URI.create(<span class="string">&quot;https://zguishen.com/&quot;</span>)).build();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> jdk.internal.net.http.HttpRequestImpl#HttpRequestImpl(java.net.http.HttpRequest, java.net.ProxySelector)&#125; 109</span></span><br><span class="line"><span class="comment">         * 没有指定协议默认是 GET</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> client.send(request, HttpResponse.BodyHandlers.ofString()).body();</span><br><span class="line">        System.out.println(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * GET</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">                .uri(URI.create(<span class="string">&quot;https://api.github.com/users/zgshen&quot;</span>))</span><br><span class="line">                .header(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/vnd.github.v3+json&quot;</span>)</span><br><span class="line">                <span class="comment">//.header(&quot;Cookie&quot;, cookie)</span></span><br><span class="line">                .timeout(Duration.ofSeconds(<span class="number">10000L</span>))</span><br><span class="line">                .GET()</span><br><span class="line">                .build();</span><br><span class="line">        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">                .whenCompleteAsync((res, exp) -&gt; &#123;</span><br><span class="line">                    System.out.println(res.body());</span><br><span class="line">                &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * POST</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#x27;key&#x27;:&#x27;val&#x27;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">                .uri(URI.create(<span class="string">&quot;http://example.com/json&quot;</span>))</span><br><span class="line">                .header(<span class="string">&quot;Contend-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                .timeout(Duration.ofSeconds(<span class="number">10000L</span>))</span><br><span class="line">                .POST(HttpRequest.BodyPublishers.ofString(requestBody))</span><br><span class="line">                .build();</span><br><span class="line">        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">                .whenCompleteAsync((res, exp) -&gt; &#123;</span><br><span class="line">                    System.out.println(res.body());</span><br><span class="line">                &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * HTTP2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Http2Test</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">        HttpClient.newBuilder()</span><br><span class="line">                .followRedirects(HttpClient.Redirect.NEVER)</span><br><span class="line">                .version(HttpClient.Version.HTTP_2)</span><br><span class="line">                .build()</span><br><span class="line">                .sendAsync(HttpRequest.newBuilder()</span><br><span class="line">                                .uri(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;https://zguishen.com/&quot;</span>))</span><br><span class="line">                                .GET()</span><br><span class="line">                                .build(),</span><br><span class="line">                        HttpResponse.BodyHandlers.ofString())</span><br><span class="line">                .whenComplete((resp, t) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(resp.version());</span><br><span class="line">                        System.out.println(resp.statusCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><ul><li>[1] <a href="https://advancedweb.hu/a-categorized-list-of-all-java-and-jvm-features-since-jdk-8-to-17/">A categorized list of all Java and JVM features since JDK 8 to 17</a></li><li>[2] <a href="https://pdai.tech/md/java/java8up/java11.html">Java 全栈知识体系</a></li><li>[3] <a href="https://juejin.cn/post/6844903685563088903">Java11 HttpClient小试牛刀</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2018年9月26日，Oracle 官方宣布 Java 11 正式发布，这是自 Java8 之后 Java 大版本周期变化后的第一个长期支持版本。这篇介绍的是 Java9 到 Java11 累积的一些新特性，只涉及语法和编码上的功能，其他的如工具和虚拟机改进不涉及。&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
    <category term="NewFeatures" scheme="https://zguishen.com/tags/NewFeatures/"/>
    
  </entry>
  
  <entry>
    <title>从 Java8 到 Java11 再到 Java17 的新特性(1)</title>
    <link href="https://zguishen.com/posts/36db0091.html"/>
    <id>https://zguishen.com/posts/36db0091.html</id>
    <published>2021-09-18T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>从 JDK8 之后，Java 的更新策略改为以时间驱动的方式，每六个月发布一个新的Java版本，每三年发表一个长期支持版本。一般如果要对旧 JDK 进行升级，都会选择长期支持版，JDK11 和最近更新的 JDK17 是长期支持版本。但是由于商业项目更看重稳定性，更新 JDK 带来的收益不大，大多数人不愿意踩坑去更新 JDK。因此，很多人都只是从新闻了解到新 JDK 的新特性，平常开发没有接触到，甚至有些在用 JDK8 的人连 JDK8 的新特性都用不利索或者直接就不知道。其实许多新特性是可以简化我们的开发，能让我们以更优雅的方式实现功能。接下来我将分三篇文章分别简单介绍 JDK8、JDK9-JDk11 和 JDK12-JDK17 在编码方面的一些新功能，至于虚拟机的改进和其他部门这里暂不做讨论。</p><p>先从 Java8 开始说起，看看部分常用的新特性。<br>本文源码地址：<a href="https://github.com/zgshen/code-note/tree/master/src/com/jdk/java8">code-note</a></p><h3 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1. Lambda 表达式"></a>1. Lambda 表达式</h3><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中），让匿名内部类的写法更简便。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LambdaTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LambdaTest</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//use param str to do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">interfaceTest</span><span class="params">(SingleFncInterface singleFunInterface)</span> &#123;</span><br><span class="line">        singleFunInterface.doSomething(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleMenthod</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;simple method. str is:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMenthod</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static menthod. str is:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单函数接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SingleFncInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 <code>SingleFncInterface</code> 是一个典型的函数式接口，只包含一个抽象方法，可以加上 <code>@FunctionalInterface</code> 注解标记，限制只允许定义一个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lambda 本质就是单函数接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singleFunTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//作为参数的形式</span></span><br><span class="line">    LambdaTest.interfaceTest((String str) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;single function interface. param:&quot;</span> + str);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SingleFncInterface s = (String str) -&gt; System.out.println(str);</span></span><br><span class="line"><span class="type">SingleFncInterface</span> <span class="variable">s</span> <span class="operator">=</span> str -&gt; System.out.println(str);</span><br><span class="line">    s.doSomething(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简化形式，方法引用</span></span><br><span class="line">    <span class="comment">//LambdaTest.interfaceTest(item -&gt; System.out.println(item));</span></span><br><span class="line">    LambdaTest.interfaceTest(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 lambda 表达式的语法格式是如：(parameters) -&gt; expression&#x2F;statements，特殊的还有更加简化的方法引用方式。</p><p>方法引用可分为三种，静态、实例和构造引用，使用例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//静态引用。意思就是用 String 的 valof() 方法来实现 Function 接口的 apply 方法</span></span><br><span class="line">    Function&lt;Integer, String&gt; fun = String::valueOf;</span><br><span class="line">    <span class="type">String</span> <span class="variable">apply</span> <span class="operator">=</span> fun.apply(<span class="number">100</span>);</span><br><span class="line">    System.out.println(apply);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态引用</span></span><br><span class="line">    <span class="type">SingleFncInterface</span> <span class="variable">sfi1</span> <span class="operator">=</span> LambdaTest::staticMenthod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例引用</span></span><br><span class="line">    <span class="type">LambdaTest</span> <span class="variable">lambdaTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTest</span>();</span><br><span class="line">    <span class="type">SingleFncInterface</span> <span class="variable">sfi2</span> <span class="operator">=</span> lambdaTest::simpleMenthod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造引用，带参数</span></span><br><span class="line">    <span class="type">SingleFncInterface</span> <span class="variable">sfi3</span> <span class="operator">=</span> LambdaTest::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造引用，不带参数</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> LambdaTest::<span class="keyword">new</span>;</span><br><span class="line">    <span class="comment">//runnable.run();//单函数 Runnable 接口 run 方法由 LambdaTest 构造实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据输入和返回参数的不同，JDK 中提供了四种类型的函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 四种类型函数式接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Function&lt;T, R&gt;</span></span><br><span class="line"><span class="comment">     * 调用方法 R apply(T t);</span></span><br><span class="line"><span class="comment">     * T：入参类型，R：出参类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Function&lt;Integer, Integer&gt; function = n -&gt; n*n;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">apply</span> <span class="operator">=</span> function.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(apply);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Consumer&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * 调用方法：void accept(T t);</span></span><br><span class="line"><span class="comment">     * T：入参类型；没有出参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">    consumer.accept(<span class="string">&quot;output msg.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Supplier&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * 调用方法：T get();</span></span><br><span class="line"><span class="comment">     * T：出参类型；没有入参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Supplier&lt;Integer&gt; supplier = () -&gt; <span class="number">10</span>*<span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">    System.out.println(integer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Predicate&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * 调用方法：boolean test(T t);</span></span><br><span class="line"><span class="comment">     * T：入参类型；出参类型是Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Predicate&lt;Integer&gt; predicate = num -&gt; num&gt;<span class="number">10</span>;<span class="comment">//是否大于10</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> predicate.test(<span class="number">20</span>);</span><br><span class="line">    System.out.println(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-接口默认方法"><a href="#2-接口默认方法" class="headerlink" title="2. 接口默认方法"></a>2. 接口默认方法</h3><p>Java8 允许在接口中添加一个或者多个默认方法，在 <code>SingleFncInterface</code> 接口中 <code>print()</code> 就是一个默认方法。增加默认方法是为了给接口添加新方法的同时不影响已有的实现，不需要修改全部实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SingleFncInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;default method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Optional-类"><a href="#3-Optional-类" class="headerlink" title="3. Optional 类"></a>3. Optional 类</h3><p>在 Java8 之前，空指针异常是编码时最需要注意的异常，我们往往都需要手动对变量进行 null 值判断，对可能的空指针异常进行捕获处理。Java8 提供的 Optional 类可以以比较优雅的方式进行空值判断，解决空指针异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">private</span> Insurance insurance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        insurance = <span class="keyword">new</span> <span class="title class_">Insurance</span>(<span class="string">&quot;Tesla&quot;</span>);</span><br><span class="line">        car = <span class="keyword">new</span> <span class="title class_">Car</span>(Optional.of(insurance));</span><br><span class="line">        person = <span class="keyword">new</span> <span class="title class_">Person</span>(Optional.of(car));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//允许传递为 null 的参数</span></span><br><span class="line">        Optional&lt;Insurance&gt; insurance = Optional.ofNullable(<span class="built_in">this</span>.insurance);</span><br><span class="line">        Optional&lt;String&gt; s = insurance.map(insurance1 -&gt; insurance1.getName());</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Person&gt; person = Optional.of(<span class="built_in">this</span>.person);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> person.flatMap(Person::getCar)</span><br><span class="line">                .flatMap(Car::getInsurance)<span class="comment">//拿到封装的 Optional&lt;Car&gt;</span></span><br><span class="line">                .map(Insurance::getName)<span class="comment">//直接拿到值</span></span><br><span class="line">                .orElse(<span class="string">&quot;ubknow&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Car&gt; c = Optional.empty();</span><br><span class="line">        Optional&lt;String&gt; s = c.flatMap(Car::getInsurance)</span><br><span class="line">                .map(Insurance::getName);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">String</span> <span class="variable">unknow</span> <span class="operator">=</span> s.orElse(<span class="string">&quot;unknow&quot;</span>);</span><br><span class="line">        System.out.println(unknow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Optional&lt;Car&gt; car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Car&gt; <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Optional&lt;Insurance&gt; insurance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.insurance = insurance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title function_">getInsurance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> insurance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Insurance</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Insurance&gt; insurance = Optional.of(<span class="built_in">this</span>.insurance)</span><br><span class="line"><span class="comment">// this.insurance 为 null 返回 Optional.empty</span></span><br><span class="line">Optional&lt;Insurance&gt; insurance = Optional.ofNullable(<span class="built_in">this</span>.insurance)</span><br></pre></td></tr></table></figure><p>简单来说，如果想得到一个非 null 值的 Optional 使用 <code>Optional.of</code>，允许 null 值的话使用 <code>Optional.ofNullable</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> person.flatMap(Person::getCar)</span><br><span class="line">                .flatMap(Car::getInsurance)</span><br><span class="line">                .map(Insurance::getName)</span><br><span class="line">                .orElse(<span class="string">&quot;unknown&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于返回一个 <code>Optional</code> 结果集需要使用 <code>flatMap</code>，比如 <code>Person::getCar</code> 方法和 <code>Car::getInsurance</code>，只要单一转换的使用 <code>map</code>，例如 <code>Insurance::getName</code>，如果是 empty 返回 orElse 的内容。</p><h3 id="4-Stream-流处理"><a href="#4-Stream-流处理" class="headerlink" title="4. Stream 流处理"></a>4. Stream 流处理</h3><p>流 Stream 通过声明的方式来处理数据，可以在管道的节点上对数据进行排序、聚合、筛选、去重和截取等等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.IntSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Fruit&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;apple&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;banana&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outputTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        integers.forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line">        integers.stream().forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//并行流底层使用Fork/Join框架实现，异步处理，输出不一定是12345</span></span><br><span class="line">        integers.parallelStream().forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//映射每个元素操作，生成新的结果</span></span><br><span class="line">        List&lt;Integer&gt; collect = integers.stream().map(n -&gt; n * n).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; fruitList = fruits.stream().map(obj -&gt; obj.name=<span class="string">&quot;I like &quot;</span>.concat(obj.name)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(fruitList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序、过滤、限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filterTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; collect = integers.stream()</span><br><span class="line">                <span class="comment">//.sorted()//排序</span></span><br><span class="line">                .sorted((x, y) -&gt; y - x)</span><br><span class="line">                .distinct()<span class="comment">//去重</span></span><br><span class="line">                .filter(n -&gt; n &lt; <span class="number">6</span>)<span class="comment">//小于6的数</span></span><br><span class="line">                .limit(<span class="number">3</span>)<span class="comment">//只截取3个元素</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合和统计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> strings.stream().collect(Collectors.joining(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最大的数 : &quot;</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最小的数 : &quot;</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">&quot;所有数之和 : &quot;</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数 : &quot;</span> + stats.getAverage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Base64-工具"><a href="#4-Base64-工具" class="headerlink" title="4.  Base64 工具"></a>4.  Base64 工具</h3><p>Java 8 内置了 Base64 编码的编码器和解码器，支持三种编解码方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Example</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//基本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(<span class="string">&quot;base64test&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(s1), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//URL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(<span class="string">&quot;base64test&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Mime</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> Base64.getMimeEncoder().encodeToString(<span class="string">&quot;base64test&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-新的日期和时间工具"><a href="#5-新的日期和时间工具" class="headerlink" title="5.  新的日期和时间工具"></a>5.  新的日期和时间工具</h3><p>在过去，Java 处理日期和时间我们一般是用 <code>java.util.Date</code>、<code>java.util.Calendar</code>  配合 <code>java.text.SimpleDateFormat</code> 来使用的，缺点是易用性差，线程不安全，不支持时区，新的日期和时间 API  解决了这些问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> localDateTime.format(formatter);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parse</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2021-01-01 12:00:00&quot;</span>, formatter);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-CompletableFuture-异步编程"><a href="#6-CompletableFuture-异步编程" class="headerlink" title="6. CompletableFuture 异步编程"></a>6. CompletableFuture 异步编程</h3><p>在 Java8 之前 Future 接口提供了异步执行任务的能力，但对于结果的获取只能通过阻塞或者轮询的方式。为了增强异步编程的功能，Java8 添加了 CompletableFuture 类，CompletableFuture 类实现了 CompletionStage 和 Future 接口，默认使用 ForkJoinPool.commonPool() 线程池。</p><p>commonPool 是当前 JVM（进程） 上的所有 CompletableFuture、并行 Stream 共享的，commonPool 的目标场景是非阻塞的 CPU 密集型任务，其线程数默认为 CPU 数量减1，所以对于我们用 java 常做的 IO 密集型任务，默认线程池是远远不够使用的；在双核及以下机器上，默认线程池又会退化为为每个任务创建一个线程，相当于没有线程池。所以使用 CompletableFuture 时要根据业务决定是否需要自定义线程池。</p><p>在 CompletableFuture 中带有 Async 的都是异步方法，get 方法是同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">futureTest</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//单纯地返回一个值</span></span><br><span class="line">    CompletableFuture&lt;String&gt; future = CompletableFuture.completedFuture(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    System.out.println(future.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接进行运算并返回</span></span><br><span class="line">    CompletableFuture&lt;Integer&gt; supplyAsync = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2500L</span>);</span><br><span class="line">            <span class="comment">//Thread.sleep(1000L);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//是否执行完毕</span></span><br><span class="line">    System.out.println(supplyAsync.isDone());</span><br><span class="line">    <span class="comment">//立刻返回执行结果或异常，否则返回指定值</span></span><br><span class="line">    System.out.println(supplyAsync.getNow(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//设置超时</span></span><br><span class="line">    System.out.println(supplyAsync.get(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于多步骤的处理用 thenApply </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">//多步骤处理，一个步骤处理完把结果返回给下一步继续处理，同步 thenApply，异步 thenApplyAsync</span></span><br><span class="line">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.completedFuture(<span class="number">1</span>)</span><br><span class="line">            .thenApply(i -&gt; i + <span class="number">2</span>)</span><br><span class="line">            .thenApplyAsync(i -&gt; i + <span class="number">3</span>)</span><br><span class="line">            <span class="comment">//计算完毕后的处理，不影响 get 返回值</span></span><br><span class="line">            .whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class="line">                result *= <span class="number">10</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;calculate result:&quot;</span> + result);</span><br><span class="line">            &#125;);</span><br><span class="line">    System.out.println(future.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合方法用 thenCompose</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thenComposeExample</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;Message&quot;</span>;</span><br><span class="line">    <span class="comment">//将字符串转换大写，得到结果再转换小写，再组合起来</span></span><br><span class="line">    <span class="type">CompletableFuture</span> <span class="variable">cf</span> <span class="operator">=</span> CompletableFuture.completedFuture(original)</span><br><span class="line">            .thenApply(s -&gt; s.toUpperCase())</span><br><span class="line">            .thenCompose(upper -&gt; CompletableFuture.completedFuture(original)</span><br><span class="line">                    .thenApply(s -&gt; s.toLowerCase())</span><br><span class="line">                    .thenApply(s -&gt; upper + s));</span><br><span class="line">    System.out.println(cf.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待多个任务一起执行完毕再进行处理可以使用 allOf 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allof</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    List&lt;Integer&gt; integers = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    List&lt;CompletableFuture&lt;Integer&gt;&gt; futureList = integers.stream()</span><br><span class="line">                    .map(item -&gt; CompletableFuture.completedFuture(item).thenApplyAsync(num -&gt; num * num))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">    CompletableFuture&lt;Void&gt; allof = CompletableFuture</span><br><span class="line">            .allOf(futureList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[futureList.size()]))</span><br><span class="line">            .whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class="line">                futureList.forEach(cf -&gt; &#123;</span><br><span class="line">                    System.out.println(cf.getNow(<span class="number">0</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">//handle 住看输出结果，因为是上面都用异步的，这里不等很可能看不到输出</span></span><br><span class="line">    allof.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><ul><li>[1] <a href="https://docs.oracle.com/javase/8/docs/api/">Java Platform SE 8</a></li><li>[2] <a href="https://www.runoob.com/java/java8-new-features.html">Java 8  新特性 | 菜鸟教程</a></li><li>[3] <a href="https://www.jianshu.com/p/8c9dc192fa63">CompletableFuture避坑1——需要自定义线程池</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从 JDK8 之后，Java 的更新策略改为以时间驱动的方式，每六个月发布一个新的Java版本，每三年发表一个长期支持版本。一般如果要对旧 JDK 进行升级，都会选择长期支持版，JDK11 和最近更新的 JDK17 是长期支持版本。但是由于商业项目更看重稳定性，更新 JDK</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://zguishen.com/tags/Java/"/>
    
    <category term="NewFeatures" scheme="https://zguishen.com/tags/NewFeatures/"/>
    
  </entry>
  
  <entry>
    <title>使用 canal 和 RabitMQ 订阅 MySQL 的 binlog</title>
    <link href="https://zguishen.com/posts/c29113dd.html"/>
    <id>https://zguishen.com/posts/c29113dd.html</id>
    <published>2021-09-10T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>记录下用 RabitMQ 订阅 binlog 的方法，相关编码的 GitHub 地址在 <a href="https://github.com/zgshen/lin/tree/master/lin-mq">lin-mq</a></p><h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h3><p>数据库新建 canal 从库用户用于订阅</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&amp;*123ABC&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>查看是否开启 binlog 模式，如果log_bin的值为OFF是未开启，为ON是已开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;my.cnf 需要开启binlog模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin <span class="comment"># 开启 binlog</span></span><br><span class="line">binlog-format=ROW <span class="comment"># 选择 ROW 模式</span></span><br><span class="line">server_id=1 <span class="comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span><br></pre></td></tr></table></figure><h3 id="2-canal"><a href="#2-canal" class="headerlink" title="2.canal"></a>2.canal</h3><p>下载 canal</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迫于墙的问题。源地址 download 太慢，用镜像</span></span><br><span class="line">wget https://mirror.ghproxy.com/\?q\=https%3A%2F%2Fgithub.com%2Falibaba%2Fcanal%2Freleases%2Fdownload%2Fcanal-1.1.5%2Fcanal.deployer-1.1.5.tar.gz</span><br><span class="line"><span class="comment"># 文件名格式有问题改下</span></span><br><span class="line"><span class="built_in">mv</span> index.html\?q=https:%2F%2Fgithub.com%2Falibaba%2Fcanal%2Freleases%2Fdownload%2Fcanal-1.1.5%2Fcanal.deployer-1.1.5.tar.gz canal.deployer.tar.gz</span><br><span class="line">tar -zvxf canal.deployer.tar.gz</span><br></pre></td></tr></table></figure><p>配置</p><p>conf&#x2F;canal.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp, kafka, rocketMQ, rabbitMQ</span></span><br><span class="line">canal.serverMode = rabbitMQ</span><br><span class="line"></span><br><span class="line">rabbitmq.host = 172.17.0.1</span><br><span class="line">rabbitmq.virtual.host = /</span><br><span class="line">rabbitmq.exchange = BINLOG_MQ_EXCHANGE</span><br><span class="line">rabbitmq.username = mq</span><br><span class="line">rabbitmq.password = mq123</span><br><span class="line"><span class="comment"># 当且仅当参数为2时，才会开启消息持久化，参数未配置、参数值为空或者参数值不等于2时，均不开启rabbitmq消息持久化</span></span><br><span class="line">rabbitmq.deliveryMode =</span><br></pre></td></tr></table></figure><p>conf&#x2F;example&#x2F;instance.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username/password  用户名密码</span></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal&amp;*123ABC</span><br><span class="line">canal.instance.connectionCharset = UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># table regex  正则匹配，这里是匹配所有表，根据需要匹配</span></span><br><span class="line">canal.instance.filter.regex=.*\\..*</span><br><span class="line"><span class="comment"># table black regex</span></span><br><span class="line">canal.instance.filter.black.regex=mysql\\.slave_.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># mq config 设置路由键，需要匹配 MQ 队列的规则</span></span><br><span class="line"><span class="comment">#canal.mq.topic=example</span></span><br><span class="line">canal.mq.topic=BINLOG_MQ_KEY.canal</span><br></pre></td></tr></table></figure><p>启动没成功，错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: Ignoring option PermSize; support was removed <span class="keyword">in</span> 8.0</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Ignoring option MaxPermSize; support was removed <span class="keyword">in</span> 8.0</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class="keyword">in</span> version 9.0 and will likely be removed <span class="keyword">in</span> a future release.</span><br><span class="line">Unrecognized VM option <span class="string">&#x27;UseCMSCompactAtFullCollection&#x27;</span></span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p>环境用的 openjdk11，有些 JVM 参数不能用所有启动失败了，改下启动脚本指定用 java8，或者自己改下 JVM 参数试试，如果你懂的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 编辑 canal/bin/startup.sh</span></span><br><span class="line"><span class="comment">## set java path</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$JAVA</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  //JAVA=$(<span class="built_in">which</span> java) <span class="built_in">which</span> 出来的是系统变量的 java 路径，换成你想要的，这里我的 java8 路径是 /usr/local/java/bin/java</span><br><span class="line">  JAVA=/usr/local/java/bin/java</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="3-RabbitMQ-和-Java-工程消费"><a href="#3-RabbitMQ-和-Java-工程消费" class="headerlink" title="3.RabbitMQ 和 Java 工程消费"></a>3.RabbitMQ 和 Java 工程消费</h3><p>建一个 topic 模式的交换机 BINLOG_MQ_EXCHANGE，再建一个队列 BINLOG_MQ_QUEUE 绑定交换机，路由键设置为 BINLOG_MQ_KEY.*</p><p>Spring Boot Java 工程 MQ 的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinlogMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BINLOG_MQ_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;BINLOG_MQ_EXCHANGE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BINLOG_MQ_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;BINLOG_MQ_QUEUE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BINLOG_MQ_KEY</span> <span class="operator">=</span> <span class="string">&quot;BINLOG_MQ_KEY.*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">binlogTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(BINLOG_MQ_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">binlogQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(BINLOG_MQ_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingBinlogExchangeMessages</span><span class="params">(Queue queue, TopicExchange topicExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(topicExchange).with(BINLOG_MQ_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者这里用了事物确认模式，手动 ACK 以下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinlogConsumerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = BinlogMQConfig.BINLOG_MQ_QUEUE, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = BinlogMQConfig.BINLOG_MQ_EXCHANGE, type = ExchangeTypes.TOPIC), key = BinlogMQConfig.BINLOG_MQ_KEY),</span></span><br><span class="line"><span class="meta">            containerFactory = &quot;pointTaskContainerFactory&quot;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Message msg, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;===binlog消费者获取mq消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">        log.info(<span class="string">&quot;===msg properties: &quot;</span> + msg.getMessageProperties().toString());</span><br><span class="line">        log.info(<span class="string">&quot;===msg body: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));</span><br><span class="line">        <span class="comment">//com.lin.mq.rabbitmq.config.RabbitMQConfig.rabbitTransactionManager 有设置事务模式需要手动ack</span></span><br><span class="line">        channel.basicAck(msg.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试插入和更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `lin`.`sys_log` (`user_id`, `username`, `operation`, `<span class="type">time</span>`, `<span class="keyword">method</span>`, `params`, `ip`, `gmt_create`) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;用户登录&#x27;</span>, <span class="string">&#x27;162&#x27;</span>, <span class="string">&#x27;com.admin.system.controller.LoginController.ajaxLogin()&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;2021-09-11 17:59:33&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> sys_log <span class="keyword">SET</span> user_id<span class="operator">=</span><span class="string">&#x27;101&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">9563</span>;</span><br></pre></td></tr></table></figure><p>消费日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-09-11 18:20:49.246  INFO 3500 --- [ntContainer<span class="comment">#0-2] com.lin.mq.binlog.BinlogConsumerService  : ===binlog消费者获取mq消息：(Body:&#x27;[B@59cec6f8(byte[704])&#x27; MessageProperties [headers=&#123;&#125;, contentLength=0, redelivered=false, receivedExchange=BINLOG_MQ_EXCHANGE, receivedRoutingKey=BINLOG_MQ_KEY.canal, deliveryTag=1, consumerTag=amq.ctag-sERW0IDERXfdDJVX9qbBvQ, consumerQueue=BINLOG_MQ_QUEUE])</span></span><br><span class="line">2021-09-11 18:20:49.247  INFO 3500 --- [ntContainer<span class="comment">#0-2] com.lin.mq.binlog.BinlogConsumerService  : ===msg properties: MessageProperties [headers=&#123;&#125;, contentLength=0, redelivered=false, receivedExchange=BINLOG_MQ_EXCHANGE, receivedRoutingKey=BINLOG_MQ_KEY.canal, deliveryTag=1, consumerTag=amq.ctag-sERW0IDERXfdDJVX9qbBvQ, consumerQueue=BINLOG_MQ_QUEUE]</span></span><br><span class="line">2021-09-11 18:20:49.247  INFO 3500 --- [ntContainer<span class="comment">#0-2] com.lin.mq.binlog.BinlogConsumerService  : ===msg body: &#123;&quot;data&quot;:[&#123;&quot;id&quot;:&quot;9563&quot;,&quot;user_id&quot;:&quot;100&quot;,&quot;username&quot;:&quot;admin&quot;,&quot;operation&quot;:&quot;用户登录&quot;,&quot;time&quot;:&quot;162&quot;,&quot;method&quot;:&quot;com.admin.system.controller.LoginController.ajaxLogin()&quot;,&quot;params&quot;:null,&quot;ip&quot;:&quot;127.0.0.1&quot;,&quot;gmt_create&quot;:&quot;2021-09-11 17:59:33&quot;&#125;],&quot;database&quot;:&quot;lin&quot;,&quot;es&quot;:1631355648000,&quot;id&quot;:4,&quot;isDdl&quot;:false,&quot;mysqlType&quot;:&#123;&quot;id&quot;:&quot;bigint(20)&quot;,&quot;user_id&quot;:&quot;bigint(20)&quot;,&quot;username&quot;:&quot;varchar(50)&quot;,&quot;operation&quot;:&quot;varchar(50)&quot;,&quot;time&quot;:&quot;int(11)&quot;,&quot;method&quot;:&quot;varchar(200)&quot;,&quot;params&quot;:&quot;text&quot;,&quot;ip&quot;:&quot;varchar(64)&quot;,&quot;gmt_create&quot;:&quot;datetime&quot;&#125;,&quot;old&quot;:null,&quot;pkNames&quot;:[&quot;id&quot;],&quot;sql&quot;:&quot;&quot;,&quot;sqlType&quot;:&#123;&quot;id&quot;:-5,&quot;user_id&quot;:-5,&quot;username&quot;:12,&quot;operation&quot;:12,&quot;time&quot;:4,&quot;method&quot;:12,&quot;params&quot;:-4,&quot;ip&quot;:12,&quot;gmt_create&quot;:93&#125;,&quot;table&quot;:&quot;sys_log&quot;,&quot;ts&quot;:1631355648355,&quot;type&quot;:&quot;INSERT&quot;&#125;</span></span><br><span class="line">2021-09-11 18:21:15.380  INFO 3500 --- [ntContainer<span class="comment">#0-3] com.lin.mq.binlog.BinlogConsumerService  : ===binlog消费者获取mq消息：(Body:&#x27;[B@7e7756ad(byte[719])&#x27; MessageProperties [headers=&#123;&#125;, contentLength=0, redelivered=false, receivedExchange=BINLOG_MQ_EXCHANGE, receivedRoutingKey=BINLOG_MQ_KEY.canal, deliveryTag=1, consumerTag=amq.ctag-EYi2Ci4Y1kEAXzT33FSBmA, consumerQueue=BINLOG_MQ_QUEUE])</span></span><br><span class="line">2021-09-11 18:21:15.380  INFO 3500 --- [ntContainer<span class="comment">#0-3] com.lin.mq.binlog.BinlogConsumerService  : ===msg properties: MessageProperties [headers=&#123;&#125;, contentLength=0, redelivered=false, receivedExchange=BINLOG_MQ_EXCHANGE, receivedRoutingKey=BINLOG_MQ_KEY.canal, deliveryTag=1, consumerTag=amq.ctag-EYi2Ci4Y1kEAXzT33FSBmA, consumerQueue=BINLOG_MQ_QUEUE]</span></span><br><span class="line">2021-09-11 18:21:15.380  INFO 3500 --- [ntContainer<span class="comment">#0-3] com.lin.mq.binlog.BinlogConsumerService  : ===msg body: &#123;&quot;data&quot;:[&#123;&quot;id&quot;:&quot;9563&quot;,&quot;user_id&quot;:&quot;101&quot;,&quot;username&quot;:&quot;admin&quot;,&quot;operation&quot;:&quot;用户登录&quot;,&quot;time&quot;:&quot;162&quot;,&quot;method&quot;:&quot;com.admin.system.controller.LoginController.ajaxLogin()&quot;,&quot;params&quot;:null,&quot;ip&quot;:&quot;127.0.0.1&quot;,&quot;gmt_create&quot;:&quot;2021-09-11 17:59:33&quot;&#125;],&quot;database&quot;:&quot;lin&quot;,&quot;es&quot;:1631355674000,&quot;id&quot;:5,&quot;isDdl&quot;:false,&quot;mysqlType&quot;:&#123;&quot;id&quot;:&quot;bigint(20)&quot;,&quot;user_id&quot;:&quot;bigint(20)&quot;,&quot;username&quot;:&quot;varchar(50)&quot;,&quot;operation&quot;:&quot;varchar(50)&quot;,&quot;time&quot;:&quot;int(11)&quot;,&quot;method&quot;:&quot;varchar(200)&quot;,&quot;params&quot;:&quot;text&quot;,&quot;ip&quot;:&quot;varchar(64)&quot;,&quot;gmt_create&quot;:&quot;datetime&quot;&#125;,&quot;old&quot;:[&#123;&quot;user_id&quot;:&quot;100&quot;&#125;],&quot;pkNames&quot;:[&quot;id&quot;],&quot;sql&quot;:&quot;&quot;,&quot;sqlType&quot;:&#123;&quot;id&quot;:-5,&quot;user_id&quot;:-5,&quot;username&quot;:12,&quot;operation&quot;:12,&quot;time&quot;:4,&quot;method&quot;:12,&quot;params&quot;:-4,&quot;ip&quot;:12,&quot;gmt_create&quot;:93&#125;,&quot;table&quot;:&quot;sys_log&quot;,&quot;ts&quot;:1631355674489,&quot;type&quot;:&quot;UPDATE&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h3><ul><li>[1] <a href="https://www.jianshu.com/p/60a9176a8825">canal 整合RabbitMQ</a></li><li>[2] <a href="https://github.com/alibaba/canal/wiki">Home · alibaba&#x2F;canal Wiki</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录下用 RabitMQ 订阅 binlog 的方法，相关编码的 GitHub 地址在 &lt;a href=&quot;https://github.com/zgshen/lin/tree/master/lin-mq&quot;&gt;lin-mq&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-数据库&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://zguishen.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="数据库" scheme="https://zguishen.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Linux IO模式及 select、poll、epoll 详解</title>
    <link href="https://zguishen.com/posts/da886e9d.html"/>
    <id>https://zguishen.com/posts/da886e9d.html</id>
    <published>2021-08-26T16:00:00.000Z</published>
    <updated>2022-05-18T15:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载注：原文链接 <a href="https://segmentfault.com/a/1190000003063859%EF%BC%8C%E7%AC%94%E8%AF%AF%E5%A4%9A%EF%BC%8C%E4%BD%86%E6%95%B4%E7%90%86%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%E5%B0%B1%E8%BD%AC%E8%BF%87%E6%9D%A5%E4%BA%86%E3%80%82">https://segmentfault.com/a/1190000003063859，笔误多，但整理比较全面就转过来了。</a></p></blockquote><blockquote><p>注：本文是对众多博客的学习和总结，可能存在理解错误。请带着怀疑的眼光，同时如果有错误希望能指出。</p></blockquote><p>同步IO和异步IO，阻塞IO和非阻塞IO分别是什么，到底有什么区别？不同的人在不同的上下文下给出的答案是不同的。所以先限定一下本文的上下文。</p><p>本文讨论的背景是Linux环境下的network IO。</p><h2 id="一-概念说明"><a href="#一-概念说明" class="headerlink" title="一 概念说明"></a>一 概念说明</h2><p>在进行解释之前，首先要说明几个概念：</p><ul><li>用户空间和内核空间</li><li>进程切换</li><li>进程的阻塞</li><li>文件描述符</li><li>缓存 I&#x2F;O</li></ul><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p><p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ol><p>注：<strong>总而言之就是很耗资源</strong>，具体的可以参考这篇文章：<a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/">进程切换</a></p><h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。</p><h3 id="文件描述符-fd"><a href="#文件描述符-fd" class="headerlink" title="文件描述符 fd"></a>文件描述符 fd</h3><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><h3 id="缓存-I-x2F-O"><a href="#缓存-I-x2F-O" class="headerlink" title="缓存 I&#x2F;O"></a>缓存 I&#x2F;O</h3><p>缓存 I&#x2F;O 又被称作标准 I&#x2F;O，大多数文件系统的默认 I&#x2F;O 操作都是缓存 I&#x2F;O。在 Linux 的缓存 I&#x2F;O 机制中，操作系统会将 I&#x2F;O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p><strong>缓存 I&#x2F;O 的缺点：</strong><br>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><h2 id="二-IO模式"><a href="#二-IO模式" class="headerlink" title="二 IO模式"></a>二 IO模式</h2><p>刚才说了，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><ol><li>等待数据准备 (Waiting for the data to be ready)</li><li>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</li></ol><p>正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。</p><ul><li>阻塞 I&#x2F;O（blocking IO）</li><li>非阻塞 I&#x2F;O（nonblocking IO）</li><li>I&#x2F;O 多路复用（ IO multiplexing）</li><li>信号驱动 I&#x2F;O（ signal driven IO）</li><li>异步 I&#x2F;O（asynchronous IO）</li></ul><p>注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。</p><h3 id="阻塞-I-x2F-O（blocking-IO）"><a href="#阻塞-I-x2F-O（blocking-IO）" class="headerlink" title="阻塞 I&#x2F;O（blocking IO）"></a>阻塞 I&#x2F;O（blocking IO）</h3><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p><p><img src="/../images/202108/1593755892-55c466c2b5fc5_fix732.png" alt="clipboard.png"></p><p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><blockquote><p>所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</p></blockquote><h3 id="非阻塞-I-x2F-O（nonblocking-IO）"><a href="#非阻塞-I-x2F-O（nonblocking-IO）" class="headerlink" title="非阻塞 I&#x2F;O（nonblocking IO）"></a>非阻塞 I&#x2F;O（nonblocking IO）</h3><p>linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p><p><img src="/../images/202108/1505222224-55c466dda9803_fix732.png" alt="clipboard.png"></p><p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><p>所以，nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。</p><h3 id="I-x2F-O-多路复用（-IO-multiplexing）"><a href="#I-x2F-O-多路复用（-IO-multiplexing）" class="headerlink" title="I&#x2F;O 多路复用（ IO multiplexing）"></a>I&#x2F;O 多路复用（ IO multiplexing）</h3><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select&#x2F;epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p><img src="/../images/202108/1903235121-55c466eb17665_fix732.png" alt="clipboard.png"></p><p><strong>当用户进程调用了select，那么整个进程会被block</strong>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>所以，I&#x2F;O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p><p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>所以，如果处理的连接数不是很高的话，使用select&#x2F;epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><h3 id="异步-I-x2F-O（asynchronous-IO）"><a href="#异步-I-x2F-O（asynchronous-IO）" class="headerlink" title="异步 I&#x2F;O（asynchronous IO）"></a>异步 I&#x2F;O（asynchronous IO）</h3><p>Linux下的asynchronous IO其实用得很少。先看一下它的流程：</p><p><img src="/../images/202108/1311869885-55c466fac00ba_fix732.png" alt="clipboard.png"></p><p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="blocking和non-blocking的区别"><a href="#blocking和non-blocking的区别" class="headerlink" title="blocking和non-blocking的区别"></a>blocking和non-blocking的区别</h4><p>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p><h4 id="synchronous-IO和asynchronous-IO的区别"><a href="#synchronous-IO和asynchronous-IO的区别" class="headerlink" title="synchronous IO和asynchronous IO的区别"></a>synchronous IO和asynchronous IO的区别</h4><p>在说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。POSIX的定义是这样子的：</p><ul><li>A synchronous I&#x2F;O operation causes the requesting process to be blocked until that I&#x2F;O operation completes;</li><li>An asynchronous I&#x2F;O operation does not cause the requesting process to be blocked;</li></ul><p>两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p><p>有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p><p>而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p><p><strong>各个IO Model的比较如图所示：</strong></p><p><img src="/../images/202108/2109320510-55c4670795194_fix732.png" alt="clipboard.png"></p><p>通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p><h2 id="三-I-x2F-O-多路复用之select、poll、epoll详解"><a href="#三-I-x2F-O-多路复用之select、poll、epoll详解" class="headerlink" title="三 I&#x2F;O 多路复用之select、poll、epoll详解"></a>三 I&#x2F;O 多路复用之select、poll、epoll详解</h2><p>select，poll，epoll都是IO多路复用的机制。I&#x2F;O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I&#x2F;O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I&#x2F;O则无需自己负责进行读写，异步I&#x2F;O的实现会负责把数据从内核拷贝到用户空间。（这里啰嗦下）</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span> <span class="params">(<span class="type">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p><p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">poll</span> <span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">unsigned</span> <span class="type">int</span> nfds, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure><p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="type">short</span> events; <span class="comment">/* requested events to watch */</span></span><br><span class="line">    <span class="type">short</span> revents; <span class="comment">/* returned events witnessed */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</p><blockquote><p>从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p></blockquote><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p><h4 id="一-epoll操作过程"><a href="#一-epoll操作过程" class="headerlink" title="一 epoll操作过程"></a>一 epoll操作过程</h4><p>epoll操作过程需要三个接口，分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>；<span class="comment">//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>；</span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure><p><strong>1. <code>int epoll_create(int size);</code></strong></p><p>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。<br>当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看&#x2F;proc&#x2F;进程id&#x2F;fd&#x2F;，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p><p><strong>2. <code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code></strong></p><p>函数是对指定描述符fd执行op操作。</p><ul><li>epfd：是epoll_create()的返回值。</li><li>op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。</li><li>fd：是需要监听的fd（文件描述符）</li><li>epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">  <span class="type">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span></span><br><span class="line">  <span class="type">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//events可以是以下几个宏的集合：</span></span><br><span class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class="line">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class="line">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class="line">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br></pre></td></tr></table></figure><p><strong>3. <code>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</code></strong></p><p>等待epfd上的io事件，最多返回maxevents个事件。</p><p>参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p><h4 id="二-工作模式"><a href="#二-工作模式" class="headerlink" title="二 工作模式"></a>二 工作模式</h4><p>epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式，LT模式与ET模式的区别如下：</p><ul><li><strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</li><li><strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</li></ul><p><strong>1. LT模式</strong></p><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p><p><strong>2. ET模式</strong></p><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p><p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读&#x2F;阻塞写操作把处理多个文件描述符的任务饿死。</p><p><strong>3. 总结</strong> </p><p>假如有这样一个例子：</p><ol><li>我们已经把一个用来从管道中读取数据的文件句柄(RFD)添加到epoll描述符</li><li>这个时候从管道的另一端被写入了2KB的数据</li><li>调用epoll_wait(2)，并且它会返回RFD，说明它已经准备好读取操作</li><li>然后我们读取了1KB的数据</li><li>调用epoll_wait(2)......</li></ol><p><strong>LT模式：</strong><br>如果是LT模式，那么在第5步调用epoll_wait(2)之后，仍然能受到通知。</p><p><strong>ET模式：</strong><br>如果我们在第1步将RFD添加到epoll描述符的时候使用了EPOLLET标志，那么在第5步调用epoll_wait(2)之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 ET 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。</p><p>当使用epoll的ET模型来工作时，当产生了一个EPOLLIN事件后，<br>读数据的时候需要考虑的是当recv()返回的大小如果等于请求的大小，那么很有可能是缓冲区还有数据未读完，也意味着该次事件还没有处理完，所以还需要再次读取：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs)&#123;</span><br><span class="line">  buflen = recv(activeevents[i].data.fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(buflen &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 由于是非阻塞的模式,所以当errno为EAGAIN时,表示当前缓冲区已无数据可读</span></span><br><span class="line">    <span class="comment">// 在这里就当作是该次事件已处理处.</span></span><br><span class="line">    <span class="keyword">if</span>(errno == EAGAIN)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(buflen == <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="comment">// 这里表示对端的socket已正常关闭.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(buflen == <span class="keyword">sizeof</span>(buf)&#123;</span><br><span class="line">      rs = <span class="number">1</span>;   <span class="comment">// 需要再次读取</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">      rs = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Linux中的EAGAIN含义</strong></p><p>Linux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。</p><p>从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。</p><p>例如，以 O_NONBLOCK的标志打开文件&#x2F;socket&#x2F;FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。</p><p>又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。</p><h4 id="三-代码演示"><a href="#三-代码演示" class="headerlink" title="三 代码演示"></a>三 代码演示</h4><p>下面是一段不完整的代码且格式不对，意在表述上面的过程，去掉了一些模板代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IPADDRESS   <span class="string">&quot;127.0.0.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT        8787</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE     1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTENQ     5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDSIZE      1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPOLLEVENTS 100</span></span><br><span class="line"></span><br><span class="line">listenfd = socket_bind(IPADDRESS,PORT);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">EPOLLEVENTS</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个描述符</span></span><br><span class="line">epollfd = epoll_create(FDSIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加监听描述符事件</span></span><br><span class="line">add_event(epollfd,listenfd,EPOLLIN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环等待</span></span><br><span class="line"><span class="keyword">for</span> ( ; ; )&#123;</span><br><span class="line">    <span class="comment">//该函数返回已经准备好的描述符事件数目</span></span><br><span class="line">    ret = epoll_wait(epollfd,events,EPOLLEVENTS,<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//处理接收到的连接</span></span><br><span class="line">    handle_events(epollfd,events,ret,listenfd,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handle_events</span><span class="params">(<span class="type">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="type">int</span> num,<span class="type">int</span> listenfd,<span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> fd;</span><br><span class="line">     <span class="comment">//进行遍历;这里只要遍历已经准备好的io事件。num并不是当初epoll_create时的FDSIZE。</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; num;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         fd = events[i].data.fd;</span><br><span class="line">        <span class="comment">//根据描述符的类型和事件类型进行处理</span></span><br><span class="line">         <span class="keyword">if</span> ((fd == listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</span><br><span class="line">            handle_accpet(epollfd,listenfd);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</span><br><span class="line">            do_read(epollfd,fd,buf);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT)</span><br><span class="line">            do_write(epollfd,fd,buf);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">add_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理接收到的连接</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handle_accpet</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> listenfd)</span>&#123;</span><br><span class="line">     <span class="type">int</span> clifd;     </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span>     </span><br><span class="line">     <span class="type">socklen_t</span>  cliaddrlen;     </span><br><span class="line">     clifd = accept(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;cliaddrlen);     </span><br><span class="line">     <span class="keyword">if</span> (clifd == <span class="number">-1</span>)         </span><br><span class="line">     perror(<span class="string">&quot;accpet error:&quot;</span>);     </span><br><span class="line">     <span class="keyword">else</span> &#123;         </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;accept a new client: %s:%d\n&quot;</span>,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);                       <span class="comment">//添加一个客户描述符和事件         </span></span><br><span class="line">         add_event(epollfd,clifd,EPOLLIN);     </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读处理</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_read</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">char</span> *buf)</span>&#123;</span><br><span class="line">    <span class="type">int</span> nread;</span><br><span class="line">    nread = read(fd,buf,MAXSIZE);</span><br><span class="line">    <span class="keyword">if</span> (nread == <span class="number">-1</span>)     &#123;         </span><br><span class="line">        perror(<span class="string">&quot;read error:&quot;</span>);         </span><br><span class="line">        close(fd); <span class="comment">//记住close fd        </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLIN); <span class="comment">//删除监听 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)     &#123;         </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;client close.\n&quot;</span>);</span><br><span class="line">        close(fd); <span class="comment">//记住close fd       </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLIN); <span class="comment">//删除监听 </span></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">else</span> &#123;         </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read message is : %s&quot;</span>,buf);        </span><br><span class="line">        <span class="comment">//修改描述符对应的事件，由读改为写         </span></span><br><span class="line">        modify_event(epollfd,fd,EPOLLOUT);     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写处理</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_write</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">char</span> *buf)</span> &#123;     </span><br><span class="line">    <span class="type">int</span> nwrite;     </span><br><span class="line">    nwrite = write(fd,buf,<span class="built_in">strlen</span>(buf));     </span><br><span class="line">    <span class="keyword">if</span> (nwrite == <span class="number">-1</span>)&#123;         </span><br><span class="line">        perror(<span class="string">&quot;write error:&quot;</span>);        </span><br><span class="line">        close(fd);   <span class="comment">//记住close fd       </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLOUT);  <span class="comment">//删除监听    </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        modify_event(epollfd,fd,EPOLLIN); </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">modify_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span>&#123;     </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：另外一端我就省了</span></span><br></pre></td></tr></table></figure><h4 id="四-epoll总结"><a href="#四-epoll总结" class="headerlink" title="四 epoll总结"></a>四 epoll总结</h4><p>在 select&#x2F;poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而<strong>epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)</strong></p><p>epoll的优点主要是一下几个方面：</p><ol><li><p>监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案(Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p></li><li><p>IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。</p></li></ol><blockquote><p>如果没有大量的idle-connection或者dead-connection，epoll的效率并不会比select&#x2F;poll高很多，但是当遇到大量的idle-connection，就会发现epoll的效率大大高于select&#x2F;poll。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/Anker/p/3269106.html">用户空间与内核空间，进程上下文与中断上下文[总结]</a></li><li><a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/">进程切换</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6">维基百科-文件描述符</a></li><li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-directio/">Linux 中直接 I&#x2F;O 机制的介绍</a></li><li><a href="http://blog.csdn.net/historyasamirror/article/details/5778378">IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></li><li><a href="http://www.cnblogs.com/bigwangdi/p/3182958.html">Linux中select poll和epoll的区别</a></li><li><a href="http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html">IO多路复用之select总结</a></li><li><a href="http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html">IO多路复用之poll总结</a></li><li><a href="http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html">IO多路复用之epoll总结</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载注：原文链接 &lt;a href=&quot;https://segmentfault.com/a/1190000003063859%EF%BC%8C%E7%AC%94%E8%AF%AF%E5%A4%9A%EF%BC%8C%E4%BD%86%E6%95%B4</summary>
      
    
    
    
    <category term="技术" scheme="https://zguishen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="转载" scheme="https://zguishen.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
